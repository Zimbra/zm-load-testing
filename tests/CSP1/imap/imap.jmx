<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${__P(jmetercsv,${__P(REQUEST.log)})}</stringProp>
      </ResultCollector>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Accounts" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${__P(ACCOUNTS.csv)}</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">USER,PASS</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IMAP User" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(LOAD.IMAP.loopcount)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(LOAD.IMAP.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">$(__P(LOAD.IMAP.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1497658914000</longProp>
        <longProp name="ThreadGroup.end_time">1497658914000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(LOAD.duration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(LOAD.delay)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="START" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import com.zimbra.jmeter.Zimbra;
import com.zimbra.jmeter.Command;

//debug();
Zimbra imap = new Zimbra(props,&quot;IMAP&quot;);
ArrayList commands = imap.getcommands();
vars.putObject(&quot;COMMANDS&quot;,commands);

// generate command DELAY
if (props.get(&quot;LOAD.IMAP.userduration&quot;) == null || commands.size() == 0) {
  vars.putObject(&quot;DELAY&quot;,&quot;0&quot;);
} else {
  int delay = Integer.parseInt(props.get(&quot;LOAD.IMAP.userduration&quot;))*1000/commands.size();
  vars.putObject(&quot;DELAY&quot;,delay.toString());
}

// initialize CONTINUE
if (commands.size() &gt; 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;true&quot;);
} else {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
} 

//Create IMAP conncection and store for all future use
//log.info(&quot;This is the user: &quot;+vars.get(&quot;USER&quot;));
IMAPClient ic = new IMAPClient();
try {
  log.info(&quot;IMAP connection: &quot;+props.get(&quot;IMAP.server&quot;)+&quot; &quot;+props.get(&quot;IMAP.port&quot;));
  ic.connect(props.get(&quot;IMAP.server&quot;),Integer.parseInt(props.get(&quot;IMAP.port&quot;)));
} catch (Exception x) {
  log.info(&quot;connect error: &quot;,x);
}
vars.putObject(&quot;IMAPCLIENT&quot;,ic);

// Random folder names to be used by IMAP
vars.put(&quot;imap_folder1&quot;,&quot;imapfolder1_${__Random(1,1000)}&quot;);
vars.put(&quot;imap_folder2&quot;,&quot;imapfolder2_${__Random(1,1000)}&quot;);
//log.info(&quot;Imap folder1 name is: &quot; +vars.get(&quot;imap_folder1&quot;));
//log.info(&quot;Imap folder2 name is: &quot; +vars.get(&quot;imap_folder2&quot;));

//log.info(Thread.currentThread().getName()+&quot; &quot;+ctx.getThreadNum().toString()+&quot; START&quot;);
log.info(Thread.currentThread().getName()+&quot; START&quot;);
//Capture IMAP response and include as sampler Response
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Run_Commands" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Next_Command" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Command;

ArrayList commands = vars.getObject(&quot;COMMANDS&quot;);
if (commands.size() &gt; 0) {
  //log.info(&quot;Testing: &quot;+commands);
  Command c = commands.remove(0);
  vars.put(&quot;COMMAND&quot;,c.getName());
  for (Map.Entry a: c.argsSet()) {
  	vars.put(a.getKey(),a.getValue());
  }

//Below log code to debug issues with command
//log.info(&quot;Command executed is: &quot; +vars.get(&quot;COMMAND&quot;));
//log.info(&quot;Command execution flag is: &quot; +vars.get(&quot;CONTINUE&quot;));

}
if (commands.size() == 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Command_Execution" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Command Delay" enabled="true">
              <stringProp name="ConstantTimer.delay">${DELAY}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Commands" enabled="true">
              <stringProp name="SwitchController.value">${COMMAND}</stringProp>
            </SwitchController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(Thread.currentThread().getName()+&quot; &quot;+vars.get(&quot;COMMAND&quot;)+&quot; not currently supported&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="APPEND" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; APPEND&quot;);
  ic.append(&quot;INBOX&quot;,null,null,&quot;From: &quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+
                              &quot;\nTo: &quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+
                              &quot;\nSubject: Testing\n\nThis is a test of IMAP append.\n&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());                            
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }

  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; APPEND: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;APPEND completed&quot;))) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CAPABILITY" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; CAPABILITY&quot;);
  ic.capability();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; CAPABILITY: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK CAPABILITY completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
//log.info(&quot;Continue variable value is: &quot; +vars.get(&quot;CONTINUE&quot;));
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CHECK" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; CHECK&quot;);
  ic.check();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; CHECK: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK CHECK completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CLOSE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; CLOSE&quot;);
  ic.close();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; CLOSE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK CLOSE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="COPY" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// need to add support for situational copy of real things found

try {
  //log.info(Thread.currentThread().getName()+&quot; COPY&quot;);
  ic.copy(&quot;1&quot;,vars.get(&quot;imap_folder1&quot;));
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; COPY: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;COPY completed&quot;))) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CREATE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; CREATE&quot;);
  ic.create(vars.get(&quot;imap_folder1&quot;));
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; CREATE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK CREATE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DELETE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; DELETE&quot;);
  ic.delete(vars.get(&quot;imap_folder2&quot;));
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; DELETE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK DELETE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="EXAMINE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; EXAMINE&quot;);
  ic.examine(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; EXAMINE: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;EXAMINE completed&quot;))) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="EXPUNGE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; EXPUNGE&quot;);
  ic.expunge();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; EXPUNGE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK EXPUNGE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="FETCH" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// use MSGID from search if done
ArrayList msgid = vars.getObject(&quot;MSGID&quot;);
String i = &quot;1&quot;;
if (msgid != null &amp;&amp; msgid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msgid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msgid.get(x));
  i = msgid.get(x);
}

try {
  //log.info(&quot;MSGID: &quot;+i);
   //log.info(Thread.currentThread().getName()+&quot; FETCH&quot;);
  ic.fetch(i,&quot;BODY[TEXT]&quot;);
  // log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; FETCH: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK FETCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ID" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; ID&quot;);
  ic.sendCommand(&quot;ID&quot;,&quot;(\&quot;JMeter\&quot; \&quot;BeanShell\&quot; \&quot;Commons-Net\&quot; \&quot;Testing\&quot;)&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; ID: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK ID completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="IDLE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.concurrent.TimeUnit;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; IDLE&quot;);
  ic.sendCommand(&quot;IDLE&quot;);
  TimeUnit.SECONDS.sleep(10);
  ic.sendData(&quot;DONE&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; IDLE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK IDLE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LIST" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; LIST&quot;);
  ic.list(&quot;\&quot;\&quot;&quot;,&quot;\&quot;*\&quot;&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; LIST: &quot;+e);
}

// store the response mailboxes for posible use in other commands
// available in the jmeter variable MAILBOXES
//ArrayList mailboxes = new ArrayList();
//String[] lines = icw.toString().split(&quot;\\r?\\n&quot;);
//for (String s: lines) {
//	// * LIST (\HasNoChildren \Drafts) &quot;/&quot; &quot;Drafts&quot;
//	Pattern p = Pattern.compile(&quot;\\* LIST \\(([^\\)]+)\\) \&quot;([^\&quot;]+)\&quot; \&quot;([^\&quot;]+)\&quot;&quot;);
//	Matcher m = p.matcher(s);
//     while (m.find()) {
//	  //log.info(m.group(2)+m.group(3));
//	  mailboxes.add(m.group(2)+m.group(3));
//     }
//}
//vars.putObject(&quot;MAILBOXES&quot;,mailboxes);

if (!ic.getReplyString().contains(&quot;OK LIST completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LOGIN" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import com.zimbra.jmeter.Zimbra;
import com.zimbra.jmeter.Command;

IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

//Create IMAP conncection and store for all future use
//log.info(&quot;This is the user: &quot;+vars.get(&quot;USER&quot;));
IMAPClient ic = new IMAPClient();
try {
  log.info(&quot;IMAP connection: &quot;+props.get(&quot;IMAP.server&quot;)+&quot; &quot;+props.get(&quot;IMAP.port&quot;));
  ic.connect(props.get(&quot;IMAP.server&quot;),Integer.parseInt(props.get(&quot;IMAP.port&quot;)));
} catch (Exception x) {
  log.info(&quot;connect error: &quot;,x);
}
vars.putObject(&quot;IMAPCLIENT&quot;,ic);

try {
  //log.info(Thread.currentThread().getName()+&quot; LOGIN&quot;);
  ic.login(vars.get(&quot;USER&quot;),vars.get(&quot;PASS&quot;));
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; LOGIN: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;LOGIN completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LOGOUT" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;
String logout_error;

try {
  ic.logout();
  //log.info(Thread.currentThread().getName()+&quot; LOGOUT&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  logout_error=&quot;true&quot;;
  log.info (&quot;Error flag is: &quot; +logout_error);
  }
  
  log.info(Thread.currentThread().getName()+&quot; LOGOUT: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK LOGOUT completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  continue_flag = &quot;false&quot;;
}

if (logout_error == &quot;true&quot;){
  SampleResult.setSuccessful(true);
  IsSuccess=true;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LSUB" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; LSUB&quot;);
  ic.lsub(&quot;\&quot;\&quot;&quot;,&quot;\&quot;*\&quot;&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; LSUB: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK LSUB completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NAMESPACE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NAMESPACE&quot;);
  ic.sendCommand(&quot;NAMESPACE&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NAMESPACE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NAMESPACE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NOOP" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NOOP&quot;);
  ic.noop();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NOOP: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NOOP completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RENAME" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; RENAME&quot;);
  ic.rename(vars.get(&quot;imap_folder1&quot;),vars.get(&quot;imap_folder2&quot;));
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; RENAME: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK RENAME completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SEARCH" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; SEARCH&quot;);
  ic.search(&quot;ALL&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; SEARCH: &quot;+e);
}

// store the response ID for posible use in other commands
// available in the jmeter variable MSGID
ArrayList msgid = new ArrayList();
String[] lines = ic.getReplyString().split(&quot;\\r?\\n&quot;);
for (String s: lines) {
	// * SEARCH # # # # #
	Pattern p = Pattern.compile(&quot; *(\\d+) +&quot;);
	Matcher m = p.matcher(s);
     while (m.find()) {
	  //log.info(m.group(1));
	  msgid.add(m.group(1));
     }
}
// to reduce memory usage only keep limit records
int limit = Integer.parseInt(props.getProperty(&quot;SETTING.limit&quot;,&quot;5&quot;));
if (limit &gt; 0 &amp;&amp; msgid.size() &gt; limit) {
  msgid.subList(limit,msgid.size()).clear();
}
//log.info(&quot;MSGIDS: &quot;+msgid.size());
vars.putObject(&quot;MSGID&quot;,msgid);

if (!ic.getReplyString().contains(&quot;OK SEARCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
  ic.select(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;SELECT completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="STATUS" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; STATUS&quot;);
  ic.status(&quot;INBOX&quot;,new String[]{&quot;MESSAGES&quot;,&quot;RECENT&quot;,&quot;UIDNEXT&quot;,&quot;UIDVALIDITY&quot;,&quot;UNSEEN&quot;});
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; STATUS: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK STATUS completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="STORE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// need to add support for situational store of real things found

try {
  //log.info(Thread.currentThread().getName()+&quot; STORE&quot;);
  ic.store(&quot;1&quot;,&quot;+FLAGS&quot;,&quot;(\\Seen)&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; STORE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK STORE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SUBSCRIBE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; SUBSCRIBE&quot;);
  ic.subscribe(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; SUBSCRIBE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK SUBSCRIBE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID COPY" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// need to add support for situational uid copy of real things found
ArrayList msguid = vars.getObject(&quot;MSGUID&quot;);
String i = &quot;1&quot;;
if (msguid != null &amp;&amp; msguid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msguid.size());
  log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msguid.get(x));
  i = msguid.get(x);
}

try {
  //log.info(Thread.currentThread().getName()+&quot; UID COPY&quot;);
  ic.uid(&quot;COPY&quot;,i+&quot; &quot;+vars.get(&quot;imap_folder1&quot;));
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID COPY: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;UID COPY completed&quot;))) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID FETCH" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// use MSGUID from uid search if done
ArrayList msguid = vars.getObject(&quot;MSGUID&quot;);
String i = &quot;1&quot;;
if (msguid != null &amp;&amp; msguid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msguid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msguid.get(x));
  i = msguid.get(x);
}

try {
  //log.info(&quot;MSGUID: &quot;+i);
  //log.info(Thread.currentThread().getName()+&quot; UID FETCH&quot;);
  ic.uid(&quot;FETCH&quot;,i+&quot; BODY[TEXT]&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID FETCH: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK UID FETCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID SEARCH" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; UID SEARCH&quot;);
  ic.uid(&quot;SEARCH&quot;,&quot;ALL&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID SEARCH: &quot;+e);
}

// store the response UID for posible use in other commands
// available in the jmeter variable MSGUID
ArrayList msguid = new ArrayList();
String[] lines = ic.getReplyString().split(&quot;\\r?\\n&quot;);
for (String s: lines) {
	// * SEARCH # # # # #
	Pattern p = Pattern.compile(&quot; *(\\d+) +&quot;);
	Matcher m = p.matcher(s);
     while (m.find()) {
	  //log.info(m.group(1));
	  msguid.add(m.group(1));
     }
}
// to reduce memory usage only keep limit records
int limit = Integer.parseInt(props.getProperty(&quot;SETTING.limit&quot;,&quot;5&quot;));
if (limit &gt; 0 &amp;&amp; msguid.size() &gt; limit) {
  msguid.subList(limit,msguid.size()).clear();
}
//log.info(&quot;MSGIDS: &quot;+msguid.size());
vars.putObject(&quot;MSGUID&quot;,msguid);

if (!ic.getReplyString().contains(&quot;OK UID SEARCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID STORE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// need to add support for situational uic copy of real things found

try {
  //log.info(Thread.currentThread().getName()+&quot; UID STORE&quot;);
  ic.uid(&quot;STORE&quot;,&quot;1 +FLAGS (\\Seen)&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID STORE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK UID STORE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UNSELECT" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; UNSELECT&quot;);
  ic.sendCommand(&quot;UNSELECT&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UNSELECT: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK UNSELECT completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UNSUBSCRIBE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; UNSUBSCRIBE&quot;);
  ic.unsubscribe(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UNSUBSCRIBE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK UNSUBSCRIBE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LOOP" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">20</stringProp>
              </LoopController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LOGIN" enabled="true">
                  <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import com.zimbra.jmeter.Zimbra;
import com.zimbra.jmeter.Command;

IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

//Create IMAP conncection and store for all future use
//log.info(&quot;This is the user: &quot;+vars.get(&quot;USER&quot;));
IMAPClient ic = new IMAPClient();
try {
  log.info(&quot;IMAP connection: &quot;+props.get(&quot;IMAP.server&quot;)+&quot; &quot;+props.get(&quot;IMAP.port&quot;));
  ic.connect(props.get(&quot;IMAP.server&quot;),Integer.parseInt(props.get(&quot;IMAP.port&quot;)));
} catch (Exception x) {
  log.info(&quot;connect error: &quot;,x);
}
vars.putObject(&quot;IMAPCLIENT&quot;,ic);

try {
  //log.info(Thread.currentThread().getName()+&quot; LOGIN&quot;);
  ic.login(vars.get(&quot;USER&quot;),vars.get(&quot;PASS&quot;));
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; LOGIN: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;LOGIN completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IDLE" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="IDLE" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.concurrent.TimeUnit;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; IDLE&quot;);
  ic.sendCommand(&quot;IDLE&quot;);
  TimeUnit.SECONDS.sleep(10);
  ic.sendData(&quot;DONE&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; IDLE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK IDLE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NOOP" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NOOP" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NOOP&quot;);
  ic.noop();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NOOP: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NOOP completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ID" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ID" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; ID&quot;);
  ic.sendCommand(&quot;ID&quot;,&quot;(\&quot;JMeter\&quot; \&quot;BeanShell\&quot; \&quot;Commons-Net\&quot; \&quot;Testing\&quot;)&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; ID: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK ID completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IDLE" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="IDLE" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.concurrent.TimeUnit;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; IDLE&quot;);
  ic.sendCommand(&quot;IDLE&quot;);
  TimeUnit.SECONDS.sleep(10);
  ic.sendData(&quot;DONE&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; IDLE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK IDLE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NOOP" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NOOP" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NOOP&quot;);
  ic.noop();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NOOP: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NOOP completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ID" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ID" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; ID&quot;);
  ic.sendCommand(&quot;ID&quot;,&quot;(\&quot;JMeter\&quot; \&quot;BeanShell\&quot; \&quot;Commons-Net\&quot; \&quot;Testing\&quot;)&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; ID: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK ID completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SELECT" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
  ic.select(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;SELECT completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID SEARCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID SEARCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; UID SEARCH&quot;);
  ic.uid(&quot;SEARCH&quot;,&quot;ALL&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID SEARCH: &quot;+e);
}

// store the response UID for posible use in other commands
// available in the jmeter variable MSGUID
ArrayList msguid = new ArrayList();
String[] lines = ic.getReplyString().split(&quot;\\r?\\n&quot;);
for (String s: lines) {
	// * SEARCH # # # # #
	Pattern p = Pattern.compile(&quot; *(\\d+) +&quot;);
	Matcher m = p.matcher(s);
     while (m.find()) {
	  //log.info(m.group(1));
	  msguid.add(m.group(1));
     }
}
// to reduce memory usage only keep limit records
int limit = Integer.parseInt(props.getProperty(&quot;SETTING.limit&quot;,&quot;5&quot;));
if (limit &gt; 0 &amp;&amp; msguid.size() &gt; limit) {
  msguid.subList(limit,msguid.size()).clear();
}
//log.info(&quot;MSGIDS: &quot;+msguid.size());
vars.putObject(&quot;MSGUID&quot;,msguid);

if (!ic.getReplyString().contains(&quot;OK UID SEARCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID FETCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID FETCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// use MSGUID from uid search if done
ArrayList msguid = vars.getObject(&quot;MSGUID&quot;);
String i = &quot;1&quot;;
if (msguid != null &amp;&amp; msguid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msguid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msguid.get(x));
  i = msguid.get(x);
}

try {
  //log.info(&quot;MSGUID: &quot;+i);
  //log.info(Thread.currentThread().getName()+&quot; UID FETCH&quot;);
  ic.uid(&quot;FETCH&quot;,i+&quot; BODY[TEXT]&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID FETCH: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK UID FETCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IDLE" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="IDLE" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.concurrent.TimeUnit;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; IDLE&quot;);
  ic.sendCommand(&quot;IDLE&quot;);
  TimeUnit.SECONDS.sleep(10);
  ic.sendData(&quot;DONE&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; IDLE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK IDLE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ID" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ID" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; ID&quot;);
  ic.sendCommand(&quot;ID&quot;,&quot;(\&quot;JMeter\&quot; \&quot;BeanShell\&quot; \&quot;Commons-Net\&quot; \&quot;Testing\&quot;)&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; ID: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK ID completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SELECT" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
  ic.select(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;SELECT completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID SEARCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID SEARCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; UID SEARCH&quot;);
  ic.uid(&quot;SEARCH&quot;,&quot;ALL&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID SEARCH: &quot;+e);
}

// store the response UID for posible use in other commands
// available in the jmeter variable MSGUID
ArrayList msguid = new ArrayList();
String[] lines = ic.getReplyString().split(&quot;\\r?\\n&quot;);
for (String s: lines) {
	// * SEARCH # # # # #
	Pattern p = Pattern.compile(&quot; *(\\d+) +&quot;);
	Matcher m = p.matcher(s);
     while (m.find()) {
	  //log.info(m.group(1));
	  msguid.add(m.group(1));
     }
}
// to reduce memory usage only keep limit records
int limit = Integer.parseInt(props.getProperty(&quot;SETTING.limit&quot;,&quot;5&quot;));
if (limit &gt; 0 &amp;&amp; msguid.size() &gt; limit) {
  msguid.subList(limit,msguid.size()).clear();
}
//log.info(&quot;MSGIDS: &quot;+msguid.size());
vars.putObject(&quot;MSGUID&quot;,msguid);

if (!ic.getReplyString().contains(&quot;OK UID SEARCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NOOP" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NOOP" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NOOP&quot;);
  ic.noop();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NOOP: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NOOP completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID FETCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID FETCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// use MSGUID from uid search if done
ArrayList msguid = vars.getObject(&quot;MSGUID&quot;);
String i = &quot;1&quot;;
if (msguid != null &amp;&amp; msguid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msguid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msguid.get(x));
  i = msguid.get(x);
}

try {
  //log.info(&quot;MSGUID: &quot;+i);
  //log.info(Thread.currentThread().getName()+&quot; UID FETCH&quot;);
  ic.uid(&quot;FETCH&quot;,i+&quot; BODY[TEXT]&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID FETCH: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK UID FETCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NOOP" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NOOP" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NOOP&quot;);
  ic.noop();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NOOP: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NOOP completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID FETCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID FETCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// use MSGUID from uid search if done
ArrayList msguid = vars.getObject(&quot;MSGUID&quot;);
String i = &quot;1&quot;;
if (msguid != null &amp;&amp; msguid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msguid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msguid.get(x));
  i = msguid.get(x);
}

try {
  //log.info(&quot;MSGUID: &quot;+i);
  //log.info(Thread.currentThread().getName()+&quot; UID FETCH&quot;);
  ic.uid(&quot;FETCH&quot;,i+&quot; BODY[TEXT]&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID FETCH: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK UID FETCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IDLE" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="IDLE" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.concurrent.TimeUnit;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; IDLE&quot;);
  ic.sendCommand(&quot;IDLE&quot;);
  TimeUnit.SECONDS.sleep(10);
  ic.sendData(&quot;DONE&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; IDLE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK IDLE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SELECT" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
  ic.select(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;SELECT completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID SEARCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID SEARCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; UID SEARCH&quot;);
  ic.uid(&quot;SEARCH&quot;,&quot;ALL&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID SEARCH: &quot;+e);
}

// store the response UID for posible use in other commands
// available in the jmeter variable MSGUID
ArrayList msguid = new ArrayList();
String[] lines = ic.getReplyString().split(&quot;\\r?\\n&quot;);
for (String s: lines) {
	// * SEARCH # # # # #
	Pattern p = Pattern.compile(&quot; *(\\d+) +&quot;);
	Matcher m = p.matcher(s);
     while (m.find()) {
	  //log.info(m.group(1));
	  msguid.add(m.group(1));
     }
}
// to reduce memory usage only keep limit records
int limit = Integer.parseInt(props.getProperty(&quot;SETTING.limit&quot;,&quot;5&quot;));
if (limit &gt; 0 &amp;&amp; msguid.size() &gt; limit) {
  msguid.subList(limit,msguid.size()).clear();
}
//log.info(&quot;MSGIDS: &quot;+msguid.size());
vars.putObject(&quot;MSGUID&quot;,msguid);

if (!ic.getReplyString().contains(&quot;OK UID SEARCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ID" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ID" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; ID&quot;);
  ic.sendCommand(&quot;ID&quot;,&quot;(\&quot;JMeter\&quot; \&quot;BeanShell\&quot; \&quot;Commons-Net\&quot; \&quot;Testing\&quot;)&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; ID: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK ID completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SELECT" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
  ic.select(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;SELECT completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID FETCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID FETCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// use MSGUID from uid search if done
ArrayList msguid = vars.getObject(&quot;MSGUID&quot;);
String i = &quot;1&quot;;
if (msguid != null &amp;&amp; msguid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msguid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msguid.get(x));
  i = msguid.get(x);
}

try {
  //log.info(&quot;MSGUID: &quot;+i);
  //log.info(Thread.currentThread().getName()+&quot; UID FETCH&quot;);
  ic.uid(&quot;FETCH&quot;,i+&quot; BODY[TEXT]&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID FETCH: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK UID FETCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IDLE" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="IDLE" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.concurrent.TimeUnit;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; IDLE&quot;);
  ic.sendCommand(&quot;IDLE&quot;);
  TimeUnit.SECONDS.sleep(10);
  ic.sendData(&quot;DONE&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; IDLE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK IDLE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NAMESPACE" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NAMESPACE" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NAMESPACE&quot;);
  ic.sendCommand(&quot;NAMESPACE&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NAMESPACE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NAMESPACE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NOOP" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NOOP" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NOOP&quot;);
  ic.noop();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NOOP: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NOOP completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="STATUS" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="STATUS" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; STATUS&quot;);
  ic.status(&quot;INBOX&quot;,new String[]{&quot;MESSAGES&quot;,&quot;RECENT&quot;,&quot;UIDNEXT&quot;,&quot;UIDVALIDITY&quot;,&quot;UNSEEN&quot;});
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; STATUS: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK STATUS completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ID" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ID" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; ID&quot;);
  ic.sendCommand(&quot;ID&quot;,&quot;(\&quot;JMeter\&quot; \&quot;BeanShell\&quot; \&quot;Commons-Net\&quot; \&quot;Testing\&quot;)&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; ID: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK ID completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID SEARCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID SEARCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; UID SEARCH&quot;);
  ic.uid(&quot;SEARCH&quot;,&quot;ALL&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID SEARCH: &quot;+e);
}

// store the response UID for posible use in other commands
// available in the jmeter variable MSGUID
ArrayList msguid = new ArrayList();
String[] lines = ic.getReplyString().split(&quot;\\r?\\n&quot;);
for (String s: lines) {
	// * SEARCH # # # # #
	Pattern p = Pattern.compile(&quot; *(\\d+) +&quot;);
	Matcher m = p.matcher(s);
     while (m.find()) {
	  //log.info(m.group(1));
	  msguid.add(m.group(1));
     }
}
// to reduce memory usage only keep limit records
int limit = Integer.parseInt(props.getProperty(&quot;SETTING.limit&quot;,&quot;5&quot;));
if (limit &gt; 0 &amp;&amp; msguid.size() &gt; limit) {
  msguid.subList(limit,msguid.size()).clear();
}
//log.info(&quot;MSGIDS: &quot;+msguid.size());
vars.putObject(&quot;MSGUID&quot;,msguid);

if (!ic.getReplyString().contains(&quot;OK UID SEARCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CLOSE" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CLOSE" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; CLOSE&quot;);
  ic.close();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; CLOSE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK CLOSE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LOGOUT" enabled="true">
                  <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;
String logout_error;

try {
  ic.logout();
  //log.info(Thread.currentThread().getName()+&quot; LOGOUT&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  logout_error=&quot;true&quot;;
  log.info (&quot;Error flag is: &quot; +logout_error);
  }
  
  log.info(Thread.currentThread().getName()+&quot; LOGOUT: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK LOGOUT completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  continue_flag = &quot;false&quot;;
}

if (logout_error == &quot;true&quot;){
  SampleResult.setSuccessful(true);
  IsSuccess=true;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LOGIN" enabled="true">
                  <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import com.zimbra.jmeter.Zimbra;
import com.zimbra.jmeter.Command;

IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

//Create IMAP conncection and store for all future use
//log.info(&quot;This is the user: &quot;+vars.get(&quot;USER&quot;));
IMAPClient ic = new IMAPClient();
try {
  log.info(&quot;IMAP connection: &quot;+props.get(&quot;IMAP.server&quot;)+&quot; &quot;+props.get(&quot;IMAP.port&quot;));
  ic.connect(props.get(&quot;IMAP.server&quot;),Integer.parseInt(props.get(&quot;IMAP.port&quot;)));
} catch (Exception x) {
  log.info(&quot;connect error: &quot;,x);
}
vars.putObject(&quot;IMAPCLIENT&quot;,ic);

try {
  //log.info(Thread.currentThread().getName()+&quot; LOGIN&quot;);
  ic.login(vars.get(&quot;USER&quot;),vars.get(&quot;PASS&quot;));
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; LOGIN: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;LOGIN completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NOOP" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NOOP" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NOOP&quot;);
  ic.noop();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NOOP: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NOOP completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IDLE" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="IDLE" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.concurrent.TimeUnit;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; IDLE&quot;);
  ic.sendCommand(&quot;IDLE&quot;);
  TimeUnit.SECONDS.sleep(10);
  ic.sendData(&quot;DONE&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; IDLE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK IDLE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SELECT" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
  ic.select(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;SELECT completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FETCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="FETCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// use MSGID from search if done
ArrayList msgid = vars.getObject(&quot;MSGID&quot;);
String i = &quot;1&quot;;
if (msgid != null &amp;&amp; msgid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msgid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msgid.get(x));
  i = msgid.get(x);
}

try {
  //log.info(&quot;MSGID: &quot;+i);
   //log.info(Thread.currentThread().getName()+&quot; FETCH&quot;);
  ic.fetch(i,&quot;BODY[TEXT]&quot;);
  // log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; FETCH: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK FETCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="STATUS" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="STATUS" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; STATUS&quot;);
  ic.status(&quot;INBOX&quot;,new String[]{&quot;MESSAGES&quot;,&quot;RECENT&quot;,&quot;UIDNEXT&quot;,&quot;UIDVALIDITY&quot;,&quot;UNSEEN&quot;});
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; STATUS: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK STATUS completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ID" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ID" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; ID&quot;);
  ic.sendCommand(&quot;ID&quot;,&quot;(\&quot;JMeter\&quot; \&quot;BeanShell\&quot; \&quot;Commons-Net\&quot; \&quot;Testing\&quot;)&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; ID: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK ID completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NOOP" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NOOP" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NOOP&quot;);
  ic.noop();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NOOP: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NOOP completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SELECT" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
  ic.select(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;SELECT completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FETCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="FETCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// use MSGID from search if done
ArrayList msgid = vars.getObject(&quot;MSGID&quot;);
String i = &quot;1&quot;;
if (msgid != null &amp;&amp; msgid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msgid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msgid.get(x));
  i = msgid.get(x);
}

try {
  //log.info(&quot;MSGID: &quot;+i);
   //log.info(Thread.currentThread().getName()+&quot; FETCH&quot;);
  ic.fetch(i,&quot;BODY[TEXT]&quot;);
  // log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; FETCH: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK FETCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IDLE" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="IDLE" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.concurrent.TimeUnit;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; IDLE&quot;);
  ic.sendCommand(&quot;IDLE&quot;);
  TimeUnit.SECONDS.sleep(10);
  ic.sendData(&quot;DONE&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; IDLE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK IDLE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NOOP" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NOOP" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NOOP&quot;);
  ic.noop();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NOOP: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NOOP completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NAMESPACE" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NAMESPACE" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NAMESPACE&quot;);
  ic.sendCommand(&quot;NAMESPACE&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NAMESPACE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NAMESPACE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SELECT" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
  ic.select(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;SELECT completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID SEARCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID SEARCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; UID SEARCH&quot;);
  ic.uid(&quot;SEARCH&quot;,&quot;ALL&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID SEARCH: &quot;+e);
}

// store the response UID for posible use in other commands
// available in the jmeter variable MSGUID
ArrayList msguid = new ArrayList();
String[] lines = ic.getReplyString().split(&quot;\\r?\\n&quot;);
for (String s: lines) {
	// * SEARCH # # # # #
	Pattern p = Pattern.compile(&quot; *(\\d+) +&quot;);
	Matcher m = p.matcher(s);
     while (m.find()) {
	  //log.info(m.group(1));
	  msguid.add(m.group(1));
     }
}
// to reduce memory usage only keep limit records
int limit = Integer.parseInt(props.getProperty(&quot;SETTING.limit&quot;,&quot;5&quot;));
if (limit &gt; 0 &amp;&amp; msguid.size() &gt; limit) {
  msguid.subList(limit,msguid.size()).clear();
}
//log.info(&quot;MSGIDS: &quot;+msguid.size());
vars.putObject(&quot;MSGUID&quot;,msguid);

if (!ic.getReplyString().contains(&quot;OK UID SEARCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID FETCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID FETCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// use MSGUID from uid search if done
ArrayList msguid = vars.getObject(&quot;MSGUID&quot;);
String i = &quot;1&quot;;
if (msguid != null &amp;&amp; msguid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msguid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msguid.get(x));
  i = msguid.get(x);
}

try {
  //log.info(&quot;MSGUID: &quot;+i);
  //log.info(Thread.currentThread().getName()+&quot; UID FETCH&quot;);
  ic.uid(&quot;FETCH&quot;,i+&quot; BODY[TEXT]&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID FETCH: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK UID FETCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ID" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ID" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; ID&quot;);
  ic.sendCommand(&quot;ID&quot;,&quot;(\&quot;JMeter\&quot; \&quot;BeanShell\&quot; \&quot;Commons-Net\&quot; \&quot;Testing\&quot;)&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; ID: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK ID completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SELECT" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
  ic.select(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;SELECT completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID SEARCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID SEARCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; UID SEARCH&quot;);
  ic.uid(&quot;SEARCH&quot;,&quot;ALL&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID SEARCH: &quot;+e);
}

// store the response UID for posible use in other commands
// available in the jmeter variable MSGUID
ArrayList msguid = new ArrayList();
String[] lines = ic.getReplyString().split(&quot;\\r?\\n&quot;);
for (String s: lines) {
	// * SEARCH # # # # #
	Pattern p = Pattern.compile(&quot; *(\\d+) +&quot;);
	Matcher m = p.matcher(s);
     while (m.find()) {
	  //log.info(m.group(1));
	  msguid.add(m.group(1));
     }
}
// to reduce memory usage only keep limit records
int limit = Integer.parseInt(props.getProperty(&quot;SETTING.limit&quot;,&quot;5&quot;));
if (limit &gt; 0 &amp;&amp; msguid.size() &gt; limit) {
  msguid.subList(limit,msguid.size()).clear();
}
//log.info(&quot;MSGIDS: &quot;+msguid.size());
vars.putObject(&quot;MSGUID&quot;,msguid);

if (!ic.getReplyString().contains(&quot;OK UID SEARCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IDLE" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="IDLE" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.concurrent.TimeUnit;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; IDLE&quot;);
  ic.sendCommand(&quot;IDLE&quot;);
  TimeUnit.SECONDS.sleep(10);
  ic.sendData(&quot;DONE&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; IDLE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK IDLE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NOOP" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NOOP" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NOOP&quot;);
  ic.noop();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NOOP: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NOOP completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID FETCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID FETCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// use MSGUID from uid search if done
ArrayList msguid = vars.getObject(&quot;MSGUID&quot;);
String i = &quot;1&quot;;
if (msguid != null &amp;&amp; msguid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msguid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msguid.get(x));
  i = msguid.get(x);
}

try {
  //log.info(&quot;MSGUID: &quot;+i);
  //log.info(Thread.currentThread().getName()+&quot; UID FETCH&quot;);
  ic.uid(&quot;FETCH&quot;,i+&quot; BODY[TEXT]&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID FETCH: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK UID FETCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SELECT" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
  ic.select(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;SELECT completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID SEARCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID SEARCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; UID SEARCH&quot;);
  ic.uid(&quot;SEARCH&quot;,&quot;ALL&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID SEARCH: &quot;+e);
}

// store the response UID for posible use in other commands
// available in the jmeter variable MSGUID
ArrayList msguid = new ArrayList();
String[] lines = ic.getReplyString().split(&quot;\\r?\\n&quot;);
for (String s: lines) {
	// * SEARCH # # # # #
	Pattern p = Pattern.compile(&quot; *(\\d+) +&quot;);
	Matcher m = p.matcher(s);
     while (m.find()) {
	  //log.info(m.group(1));
	  msguid.add(m.group(1));
     }
}
// to reduce memory usage only keep limit records
int limit = Integer.parseInt(props.getProperty(&quot;SETTING.limit&quot;,&quot;5&quot;));
if (limit &gt; 0 &amp;&amp; msguid.size() &gt; limit) {
  msguid.subList(limit,msguid.size()).clear();
}
//log.info(&quot;MSGIDS: &quot;+msguid.size());
vars.putObject(&quot;MSGUID&quot;,msguid);

if (!ic.getReplyString().contains(&quot;OK UID SEARCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="LIST" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LIST" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; LIST&quot;);
  ic.list(&quot;\&quot;\&quot;&quot;,&quot;\&quot;*\&quot;&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; LIST: &quot;+e);
}

// store the response mailboxes for posible use in other commands
// available in the jmeter variable MAILBOXES
//ArrayList mailboxes = new ArrayList();
//String[] lines = icw.toString().split(&quot;\\r?\\n&quot;);
//for (String s: lines) {
//	// * LIST (\HasNoChildren \Drafts) &quot;/&quot; &quot;Drafts&quot;
//	Pattern p = Pattern.compile(&quot;\\* LIST \\(([^\\)]+)\\) \&quot;([^\&quot;]+)\&quot; \&quot;([^\&quot;]+)\&quot;&quot;);
//	Matcher m = p.matcher(s);
//     while (m.find()) {
//	  //log.info(m.group(2)+m.group(3));
//	  mailboxes.add(m.group(2)+m.group(3));
//     }
//}
//vars.putObject(&quot;MAILBOXES&quot;,mailboxes);

if (!ic.getReplyString().contains(&quot;OK LIST completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ID" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ID" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; ID&quot;);
  ic.sendCommand(&quot;ID&quot;,&quot;(\&quot;JMeter\&quot; \&quot;BeanShell\&quot; \&quot;Commons-Net\&quot; \&quot;Testing\&quot;)&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; ID: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK ID completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IDLE" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="IDLE" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.concurrent.TimeUnit;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; IDLE&quot;);
  ic.sendCommand(&quot;IDLE&quot;);
  TimeUnit.SECONDS.sleep(10);
  ic.sendData(&quot;DONE&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; IDLE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK IDLE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SELECT" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
  ic.select(&quot;INBOX&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
}

if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;SELECT completed&quot;))) {
  SampleResult.setSuccessful(false);
  continue_flag = &quot;false&quot;;
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FETCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="FETCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// use MSGID from search if done
ArrayList msgid = vars.getObject(&quot;MSGID&quot;);
String i = &quot;1&quot;;
if (msgid != null &amp;&amp; msgid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msgid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msgid.get(x));
  i = msgid.get(x);
}

try {
  //log.info(&quot;MSGID: &quot;+i);
   //log.info(Thread.currentThread().getName()+&quot; FETCH&quot;);
  ic.fetch(i,&quot;BODY[TEXT]&quot;);
  // log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; FETCH: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK FETCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID FETCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID FETCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// use MSGUID from uid search if done
ArrayList msguid = vars.getObject(&quot;MSGUID&quot;);
String i = &quot;1&quot;;
if (msguid != null &amp;&amp; msguid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msguid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msguid.get(x));
  i = msguid.get(x);
}

try {
  //log.info(&quot;MSGUID: &quot;+i);
  //log.info(Thread.currentThread().getName()+&quot; UID FETCH&quot;);
  ic.uid(&quot;FETCH&quot;,i+&quot; BODY[TEXT]&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID FETCH: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK UID FETCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NOOP" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NOOP" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; NOOP&quot;);
  ic.noop();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; NOOP: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK NOOP completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="UID FETCH" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID FETCH" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

// use MSGUID from uid search if done
ArrayList msguid = vars.getObject(&quot;MSGUID&quot;);
String i = &quot;1&quot;;
if (msguid != null &amp;&amp; msguid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msguid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msguid.get(x));
  i = msguid.get(x);
}

try {
  //log.info(&quot;MSGUID: &quot;+i);
  //log.info(Thread.currentThread().getName()+&quot; UID FETCH&quot;);
  ic.uid(&quot;FETCH&quot;,i+&quot; BODY[TEXT]&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; UID FETCH: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK UID FETCH completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CLOSE" enabled="true">
                  <stringProp name="IfController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CLOSE" enabled="true">
                    <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;

try {
  //log.info(Thread.currentThread().getName()+&quot; CLOSE&quot;);
  ic.close();
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  continue_flag = &quot;false&quot;;
  }
  
  IsSuccess=false; 
  log.info(Thread.currentThread().getName()+&quot; CLOSE: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK CLOSE completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false; 
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LOGOUT" enabled="true">
                  <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
String continue_flag = &quot;true&quot;;
String logout_error;

try {
  ic.logout();
  //log.info(Thread.currentThread().getName()+&quot; LOGOUT&quot;);
  //log.info(&quot;Command response is: &quot; + ic.getReplyString());
} catch (Exception e) {
  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
  logout_error=&quot;true&quot;;
  log.info (&quot;Error flag is: &quot; +logout_error);
  }
  
  log.info(Thread.currentThread().getName()+&quot; LOGOUT: &quot;+e);
}

if (!ic.getReplyString().contains(&quot;OK LOGOUT completed&quot;)) {
  SampleResult.setSuccessful(false);
  IsSuccess=false;
  continue_flag = &quot;false&quot;;
}

if (logout_error == &quot;true&quot;){
  SampleResult.setSuccessful(true);
  IsSuccess=true;
  log.info(&quot;Command response is: &quot; + ic.getReplyString());
}

vars.put(&quot;CONTINUE&quot;,continue_flag);
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="END" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.disconnect();
  log.info(Thread.currentThread().getName()+&quot; END&quot;);
} catch (Exception e) {
  log.info(Thread.currentThread().getName()+&quot; END: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
