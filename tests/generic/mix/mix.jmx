<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${__P(jmetercsv,${__P(REQUEST.log)})}</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Accounts" enabled="true">
        <stringProp name="filename">${__P(ACCOUNTS.csv)}</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">USER,PASS</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
      </CSVDataSet>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="SMTP Setup" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">import com.zimbra.jmeter.Zimbra;
//debug();
Zimbra smtp = new Zimbra(props,&quot;SMTP&quot;);
vars.putObject(&quot;SMTP&quot;,smtp);</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SMTP User" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(LOAD.SMTP.loopcount)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(LOAD.SMTP.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">$(__P(LOAD.SMTP.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1497658914000</longProp>
        <longProp name="ThreadGroup.end_time">1497658914000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(LOAD.duration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(LOAD.delay)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="START" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
import com.zimbra.jmeter.Zimbra;
import com.zimbra.jmeter.Command;

Zimbra smtp = vars.getObject(&quot;SMTP&quot;);
ArrayList commands = smtp.getcommands();

vars.putObject(&quot;COMMANDS&quot;,commands);
// generate command DELAY
if (props.get(&quot;LOAD.SMTP.userduration&quot;) == null || commands.size() == 0) {
  vars.putObject(&quot;DELAY&quot;,&quot;0&quot;);
} else {
  int delay = Integer.parseInt(props.get(&quot;LOAD.SMTP.userduration&quot;))*1000/commands.size();
  vars.putObject(&quot;DELAY&quot;,delay.toString());
}
// initialize CONTINUE
if (commands.size() &gt; 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;true&quot;);
} else {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}

//Create IMAP conncection and store for all future use
//log.info(&quot;This is the user: &quot;+vars.get(&quot;USER&quot;));
SMTPClient sc = new SMTPClient();
try {
  log.info(&quot;SMTP connection: &quot;+props.get(&quot;SMTP.server&quot;)+&quot; &quot;+props.get(&quot;SMTP.port&quot;));
  sc.connect(props.get(&quot;SMTP.server&quot;),Integer.parseInt(props.get(&quot;SMTP.port&quot;)));
  vars.putObject(&quot;SMTPCLIENT&quot;,sc);
} catch (Exception x) {
  log.info(&quot;connect error: &quot;,x);
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}

//log.info(Thread.currentThread().getName()+&quot; &quot;+ctx.getThreadNum().toString()+&quot; START&quot;);
log.info(Thread.currentThread().getName()+&quot; START&quot;);
//Capture IMAP response and include as sampler Response
SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Run_Commands" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Next_Command" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Command;

ArrayList commands = vars.getObject(&quot;COMMANDS&quot;);
if (commands.size() &gt; 0) {
  //log.info(&quot;Testing: &quot;+commands);
  Command c = commands.remove(0);
  vars.put(&quot;COMMAND&quot;,c.getName());
  for (Map.Entry a: c.argsSet()) {
  	vars.put(a.getKey(),a.getValue());
  }
  //log.info(vars.get(&quot;COMMAND&quot;));
}
if (commands.size() == 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Command_Execution" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Command Delay" enabled="true">
              <stringProp name="ConstantTimer.delay">${DELAY}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Commands" enabled="true">
              <stringProp name="SwitchController.value">${COMMAND}</stringProp>
            </SwitchController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(Thread.currentThread().getName()+&quot; &quot;+vars.get(&quot;COMMAND&quot;)+&quot; not currently supported&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="HELO" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;SMTPCLIENT&quot;);

try {
  sc.helo(InetAddress.getLocalHost().getHostName());
  log.info(Thread.currentThread().getName()+&quot; HELO&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; HELO: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="MAIL" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;SMTPCLIENT&quot;);

try {
  sc.mail(&quot;&lt;&quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;SMTP.domain&quot;)+&quot;&gt;&quot;);
  log.info(Thread.currentThread().getName()+&quot; MAIL&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; MAIL: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RCPT" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;SMTPCLIENT&quot;);

try {
  sc.rcpt(&quot;&lt;&quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;SMTP.domain&quot;)+&quot;&gt;&quot;);
  log.info(Thread.currentThread().getName()+&quot; RCPT&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; RCPT: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DATA" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
import java.io.FileReader;
SMTPClient sc = vars.getObject(&quot;SMTPCLIENT&quot;);

try {
  Writer w = sc.sendMessageData();
  // add canned From and To lines
  w.write(&quot;From: &quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;SMTP.domain&quot;)+&quot;\r\n&quot;);
  w.write(&quot;To: &quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;SMTP.domain&quot;)+&quot;\r\n&quot;);

  // read and send a files contents as message
  FileReader m = new FileReader(props.get(&quot;PROFILE.SMTP.message&quot;));
  BufferedReader b = new BufferedReader(m);
  String line = b.readLine();
  while(line != null) {
    w.write(line+&quot;\r\n&quot;);
    line = b.readLine();
  }
  w.close();
  sc.completePendingCommand();
  log.info(Thread.currentThread().getName()+&quot; DATA&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; DATA: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="QUIT" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;SMTPCLIENT&quot;);

try {
  sc.quit();
  log.info(Thread.currentThread().getName()+&quot; QUIT&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; QUIT: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="END" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;SMTPCLIENT&quot;);

try {
  sc.disconnect();
  log.info(Thread.currentThread().getName()+&quot; END&quot;);
} catch (Exception e) {
  log.info(Thread.currentThread().getName()+&quot; END: &quot;+e);
}

//SampleResult.setResponseData(sc.getReplyString());
//SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug_Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="LMTP Setup" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">import com.zimbra.jmeter.Zimbra;
//debug();
Zimbra lmtp = new Zimbra(props,&quot;LMTP&quot;);
vars.putObject(&quot;LMTP&quot;,lmtp);</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LMTP User" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(LOAD.LMTP.loopcount)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(LOAD.LMTP.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">$(__P(LOAD.LMTP.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1497658914000</longProp>
        <longProp name="ThreadGroup.end_time">1497658914000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(LOAD.duration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(LOAD.delay)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="START" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
import com.zimbra.jmeter.Zimbra;
import com.zimbra.jmeter.Command;

Zimbra lmtp = vars.getObject(&quot;LMTP&quot;);
ArrayList commands = lmtp.getcommands();

vars.putObject(&quot;COMMANDS&quot;,commands);
// generate command DELAY
if (props.get(&quot;LOAD.LMTP.userduration&quot;) == null || commands.size() == 0) {
  vars.putObject(&quot;DELAY&quot;,&quot;0&quot;);
} else {
  int delay = Integer.parseInt(props.get(&quot;LOAD.LMTP.userduration&quot;))*1000/commands.size();
  vars.putObject(&quot;DELAY&quot;,delay.toString());
}
// initialize CONTINUE
if (commands.size() &gt; 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;true&quot;);
} else {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}

//Create IMAP conncection and store for all future use
//log.info(&quot;This is the user: &quot;+vars.get(&quot;USER&quot;));
SMTPClient sc = new SMTPClient();
try {
  log.info(&quot;LMTP connection: &quot;+props.get(&quot;LMTP.server&quot;)+&quot; &quot;+props.get(&quot;LMTP.port&quot;));
  sc.connect(props.get(&quot;LMTP.server&quot;),Integer.parseInt(props.get(&quot;LMTP.port&quot;)));
  vars.putObject(&quot;LMTPCLIENT&quot;,sc);
} catch (Exception x) {
  log.info(&quot;connect error: &quot;,x);
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}

//log.info(Thread.currentThread().getName()+&quot; &quot;+ctx.getThreadNum().toString()+&quot; START&quot;);
log.info(Thread.currentThread().getName()+&quot; START&quot;);
//Capture IMAP response and include as sampler Response
SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Run_Commands" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Next_Command" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Command;

ArrayList commands = vars.getObject(&quot;COMMANDS&quot;);
if (commands.size() &gt; 0) {
  //log.info(&quot;Testing: &quot;+commands);
  Command c = commands.remove(0);
  vars.put(&quot;COMMAND&quot;,c.getName());
  for (Map.Entry a: c.argsSet()) {
  	vars.put(a.getKey(),a.getValue());
  }
  //log.info(vars.get(&quot;COMMAND&quot;));
}
if (commands.size() == 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Command_Execution" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Command Delay" enabled="true">
              <stringProp name="ConstantTimer.delay">${DELAY}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Commands" enabled="true">
              <stringProp name="SwitchController.value">${COMMAND}</stringProp>
            </SwitchController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(Thread.currentThread().getName()+&quot; &quot;+vars.get(&quot;COMMAND&quot;)+&quot; not currently supported&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LHLO" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;LMTPCLIENT&quot;);

try {
  sc.sendCommand(&quot;LHLO &quot;+InetAddress.getLocalHost().getHostName());
  log.info(Thread.currentThread().getName()+&quot; LHLO&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; LHLO: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="MAIL" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;LMTPCLIENT&quot;);

try {
  sc.mail(&quot;&lt;&quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;SMTP.domain&quot;)+&quot;&gt;&quot;);
  log.info(Thread.currentThread().getName()+&quot; MAIL&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; MAIL: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RCPT" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;LMTPCLIENT&quot;);

try {
  sc.rcpt(&quot;&lt;&quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;LMTP.domain&quot;)+&quot;&gt;&quot;);
  log.info(Thread.currentThread().getName()+&quot; RCPT&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; RCPT: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DATA" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
import java.io.FileReader;
SMTPClient sc = vars.getObject(&quot;LMTPCLIENT&quot;);

try {
  Writer w = sc.sendMessageData();
  // add canned From and To lines
  w.write(&quot;From: &quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;LMTP.domain&quot;)+&quot;\r\n&quot;);
  w.write(&quot;To: &quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;LMTP.domain&quot;)+&quot;\r\n&quot;);

  // read and send a files contents as message
  FileReader m = new FileReader(props.get(&quot;PROFILE.LMTP.message&quot;));
  BufferedReader b = new BufferedReader(m);
  String line = b.readLine();
  while(line != null) {
    w.write(line+&quot;\r\n&quot;);
    line = b.readLine();
  }
  w.close();
  sc.completePendingCommand();
  log.info(Thread.currentThread().getName()+&quot; DATA&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; DATA: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="QUIT" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;LMTPCLIENT&quot;);

try {
  sc.quit();
  log.info(Thread.currentThread().getName()+&quot; QUIT&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; QUIT: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="END" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;LMTPCLIENT&quot;);

try {
  sc.disconnect();
  log.info(Thread.currentThread().getName()+&quot; END&quot;);
} catch (Exception e) {
  log.info(Thread.currentThread().getName()+&quot; END: &quot;+e);
}

//SampleResult.setResponseData(sc.getReplyString());
//SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug_Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="IMAP Setup" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">import com.zimbra.jmeter.Zimbra;
//debug();
Zimbra imap = new Zimbra(props,&quot;IMAP&quot;);
vars.putObject(&quot;IMAP&quot;,imap);</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IMAP User" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(LOAD.IMAP.loopcount)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(LOAD.IMAP.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">$(__P(LOAD.IMAP.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1497658914000</longProp>
        <longProp name="ThreadGroup.end_time">1497658914000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(LOAD.duration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(LOAD.delay)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="START" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import com.zimbra.jmeter.Zimbra;
import com.zimbra.jmeter.Command;

Zimbra imap = vars.getObject(&quot;IMAP&quot;);
ArrayList commands = imap.getcommands();

vars.putObject(&quot;COMMANDS&quot;,commands);
// generate command DELAY
if (props.get(&quot;LOAD.IMAP.userduration&quot;) == null || commands.size() == 0) {
  vars.putObject(&quot;DELAY&quot;,&quot;0&quot;);
} else {
  int delay = Integer.parseInt(props.get(&quot;LOAD.IMAP.userduration&quot;))*1000/commands.size();
  vars.putObject(&quot;DELAY&quot;,delay.toString());
}
// initialize CONTINUE
if (commands.size() &gt; 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;true&quot;);
} else {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}

//Create IMAP conncection and store for all future use
//log.info(&quot;This is the user: &quot;+vars.get(&quot;USER&quot;));
IMAPClient ic = new IMAPClient();
try {
  log.info(&quot;IMAP connection: &quot;+props.get(&quot;IMAP.server&quot;)+&quot; &quot;+props.get(&quot;IMAP.port&quot;));
  ic.connect(props.get(&quot;IMAP.server&quot;),Integer.parseInt(props.get(&quot;IMAP.port&quot;)));
} catch (Exception x) {
  log.info(&quot;connect error: &quot;,x);
}
vars.putObject(&quot;IMAPCLIENT&quot;,ic);

//log.info(Thread.currentThread().getName()+&quot; &quot;+ctx.getThreadNum().toString()+&quot; START&quot;);
log.info(Thread.currentThread().getName()+&quot; START&quot;);
//Capture IMAP response and include as sampler Response
SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Run_Commands" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Next_Command" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Command;

ArrayList commands = vars.getObject(&quot;COMMANDS&quot;);
if (commands.size() &gt; 0) {
  //log.info(&quot;Testing: &quot;+commands);
  Command c = commands.remove(0);
  vars.put(&quot;COMMAND&quot;,c.getName());
  for (Map.Entry a: c.argsSet()) {
  	vars.put(a.getKey(),a.getValue());
  }
  //log.info(vars.get(&quot;COMMAND&quot;));
}
if (commands.size() == 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Command_Execution" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Command Delay" enabled="true">
              <stringProp name="ConstantTimer.delay">${DELAY}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Commands" enabled="true">
              <stringProp name="SwitchController.value">${COMMAND}</stringProp>
            </SwitchController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(Thread.currentThread().getName()+&quot; &quot;+vars.get(&quot;COMMAND&quot;)+&quot; not currently supported&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="APPEND" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.append(&quot;INBOX&quot;,null,null,&quot;From: &quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;IMAP.domain&quot;)+
                              &quot;\nTo: &quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;IMAP.domain&quot;)+
                              &quot;\nSubject: Testing\n\nThis is a test of IMAP append.\n&quot;);
  log.info(Thread.currentThread().getName()+&quot; APPEND&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; APPEND: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CAPABILITY" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.capability();
  log.info(Thread.currentThread().getName()+&quot; CAPABILITY&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; CAPABILITY: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CHECK" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.check();
  log.info(Thread.currentThread().getName()+&quot; CHECK&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; CHECK: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CLOSE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.close();
  log.info(Thread.currentThread().getName()+&quot; CLOSE&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; CLOSE: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="COPY" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

// need to add support for situational copy of real things found

try {
  ic.copy(&quot;1&quot;,&quot;foobar&quot;);
  log.info(Thread.currentThread().getName()+&quot; COPY&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; COPY: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CREATE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.create(&quot;foobar&quot;);
  log.info(Thread.currentThread().getName()+&quot; CREATE&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; CREATE: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DELETE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.delete(&quot;foobar&quot;);
  log.info(Thread.currentThread().getName()+&quot; DELETE&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; DELETE: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="EXAMINE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.examine(&quot;INBOX&quot;);
  log.info(Thread.currentThread().getName()+&quot; EXAMINE&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; EXAMINE: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="EXPUNGE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.expunge();
  log.info(Thread.currentThread().getName()+&quot; EXPUNGE&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; EXPUNGE: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="FETCH" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

// use MSGID from search if done
ArrayList msgid = vars.getObject(&quot;MSGID&quot;);
String i = &quot;1&quot;;
if (msgid != null &amp;&amp; msgid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msgid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msgid.get(x));
  i = msgid.get(x);
}

try {
  //log.info(&quot;MSGID: &quot;+i);
  ic.fetch(i,&quot;BODY[TEXT]&quot;);
  log.info(Thread.currentThread().getName()+&quot; FETCH&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; FETCH: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ID" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.sendCommand(&quot;ID&quot;,&quot;(\&quot;JMeter\&quot; \&quot;BeanShell\&quot; \&quot;Commons-Net\&quot; \&quot;Testing\&quot;)&quot;);
  log.info(Thread.currentThread().getName()+&quot; ID&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; ID: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="IDLE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.concurrent.TimeUnit;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.sendCommand(&quot;IDLE&quot;);
  TimeUnit.SECONDS.sleep(10);
  ic.sendData(&quot;DONE&quot;);
  log.info(Thread.currentThread().getName()+&quot; IDLE&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; IDLE: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LIST" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.list(&quot;\&quot;\&quot;&quot;,&quot;\&quot;*\&quot;&quot;);
  log.info(Thread.currentThread().getName()+&quot; LIST&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; LIST: &quot;+e);
}

// store the response mailboxes for posible use in other commands
// available in the jmeter variable MAILBOXES
//ArrayList mailboxes = new ArrayList();
//String[] lines = icw.toString().split(&quot;\\r?\\n&quot;);
//for (String s: lines) {
//	// * LIST (\HasNoChildren \Drafts) &quot;/&quot; &quot;Drafts&quot;
//	Pattern p = Pattern.compile(&quot;\\* LIST \\(([^\\)]+)\\) \&quot;([^\&quot;]+)\&quot; \&quot;([^\&quot;]+)\&quot;&quot;);
//	Matcher m = p.matcher(s);
//     while (m.find()) {
//	  //log.info(m.group(2)+m.group(3));
//	  mailboxes.add(m.group(2)+m.group(3));
//     }
//}
//vars.putObject(&quot;MAILBOXES&quot;,mailboxes);

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LOGIN" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.login(vars.get(&quot;USER&quot;),vars.get(&quot;PASS&quot;));
  log.info(Thread.currentThread().getName()+&quot; LOGIN&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; LOGIN: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LOGOUT" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.logout();
  log.info(Thread.currentThread().getName()+&quot; LOGOUT&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; LOGOUT: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LSUB" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.lsub(&quot;\&quot;\&quot;&quot;,&quot;\&quot;*\&quot;&quot;);
  log.info(Thread.currentThread().getName()+&quot; LSUB&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; LSUB: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NAMESPACE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.sendCommand(&quot;NAMESPACE&quot;);
  log.info(Thread.currentThread().getName()+&quot; NAMESPACE&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; NAMESPACE: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NOOP" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.noop();
  log.info(Thread.currentThread().getName()+&quot; NOOP&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; NOOP: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RENAME" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.rename(&quot;foobar&quot;,&quot;barfoo&quot;);
  log.info(Thread.currentThread().getName()+&quot; RENAME&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; RENAME: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SEARCH" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.search(&quot;ALL&quot;);
  log.info(Thread.currentThread().getName()+&quot; SEARCH&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; SEARCH: &quot;+e);
}

// store the response ID for posible use in other commands
// available in the jmeter variable MSGID
ArrayList msgid = new ArrayList();
String[] lines = ic.getReplyString().split(&quot;\\r?\\n&quot;);
for (String s: lines) {
	// * SEARCH # # # # #
	Pattern p = Pattern.compile(&quot; *(\\d+) +&quot;);
	Matcher m = p.matcher(s);
     while (m.find()) {
	  //log.info(m.group(1));
	  msgid.add(m.group(1));
     }
}
// to reduce memory usage only keep limit records
int limit = Integer.parseInt(props.getProperty(&quot;SETTING.limit&quot;,&quot;5&quot;));
if (limit &gt; 0 &amp;&amp; msgid.size() &gt; limit) {
  msgid.subList(limit,msgid.size()).clear();
}
//log.info(&quot;MSGIDS: &quot;+msgid.size());
vars.putObject(&quot;MSGID&quot;,msgid);

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.select(&quot;INBOX&quot;);
  log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="STATUS" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.status(&quot;INBOX&quot;,new String[]{&quot;MESSAGES&quot;,&quot;RECENT&quot;,&quot;UIDNEXT&quot;,&quot;UIDVALIDITY&quot;,&quot;UNSEEN&quot;});
  log.info(Thread.currentThread().getName()+&quot; STATUS&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; STATUS: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="STORE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

// need to add support for situational store of real things found

try {
  ic.store(&quot;1&quot;,&quot;+FLAGS&quot;,&quot;(\\Seen)&quot;);
  log.info(Thread.currentThread().getName()+&quot; STORE&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; STORE: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SUBSCRIBE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.subscribe(&quot;INBOX&quot;);
  log.info(Thread.currentThread().getName()+&quot; SUBSCRIBE&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; SUBSCRIBE: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID COPY" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

// need to add support for situational uic copy of real things found

try {
  ic.uid(&quot;COPY&quot;,&quot;1 foobar&quot;);
  log.info(Thread.currentThread().getName()+&quot; UID COPY&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; UID COPY: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID FETCH" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

// use MSGUID from uid search if done
ArrayList msguid = vars.getObject(&quot;MSGUID&quot;);
String i = &quot;1&quot;;
if (msguid != null &amp;&amp; msguid.size() &gt; 0) {
  Random r = new Random();
  Integer x = r.nextInt(msguid.size());
  //log.info(&quot;Random Index: &quot;+x+&quot; Value: &quot;+msguid.get(x));
  i = msguid.get(x);
}

try {
  //log.info(&quot;MSGUID: &quot;+i);
  ic.uid(&quot;FETCH&quot;,i+&quot; BODY[TEXT]&quot;);
  log.info(Thread.currentThread().getName()+&quot; UID FETCH&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; UID FETCH: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID SEARCH" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.uid(&quot;SEARCH&quot;,&quot;ALL&quot;);
  log.info(Thread.currentThread().getName()+&quot; UID SEARCH&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; UID SEARCH: &quot;+e);
}

// store the response UID for posible use in other commands
// available in the jmeter variable MSGUID
ArrayList msguid = new ArrayList();
String[] lines = ic.getReplyString().split(&quot;\\r?\\n&quot;);
for (String s: lines) {
	// * SEARCH # # # # #
	Pattern p = Pattern.compile(&quot; *(\\d+) +&quot;);
	Matcher m = p.matcher(s);
     while (m.find()) {
	  //log.info(m.group(1));
	  msguid.add(m.group(1));
     }
}
// to reduce memory usage only keep limit records
int limit = Integer.parseInt(props.getProperty(&quot;SETTING.limit&quot;,&quot;5&quot;));
if (limit &gt; 0 &amp;&amp; msguid.size() &gt; limit) {
  msguid.subList(limit,msguid.size()).clear();
}
//log.info(&quot;MSGIDS: &quot;+msguid.size());
vars.putObject(&quot;MSGUID&quot;,msguid);

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID STORE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

// need to add support for situational uic copy of real things found

try {
  ic.uid(&quot;STORE&quot;,&quot;1 +FLAGS (\\Seen)&quot;);
  log.info(Thread.currentThread().getName()+&quot; UID STORE&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; UID STORE: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UNSELECT" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.sendCommand(&quot;UNSELECT&quot;);
  log.info(Thread.currentThread().getName()+&quot; UNSELECT&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; UNSELECT: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UNSUBSCRIBE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.unsubscribe(&quot;INBOX&quot;);
  log.info(Thread.currentThread().getName()+&quot; UNSUBSCRIBE&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; UNSUBSCRIBE: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="END" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

try {
  ic.disconnect();
  log.info(Thread.currentThread().getName()+&quot; END&quot;);
} catch (Exception e) {
  log.info(Thread.currentThread().getName()+&quot; END: &quot;+e);
}

SampleResult.setResponseData(ic.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug_Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="POP Setup" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">import com.zimbra.jmeter.Zimbra;
//debug();
Zimbra pop = new Zimbra(props,&quot;POP&quot;);
vars.putObject(&quot;POP&quot;,pop);</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="POP User" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(LOAD.POP.loopcount)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(LOAD.POP.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(LOAD.POP.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1497658914000</longProp>
        <longProp name="ThreadGroup.end_time">1497658914000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(LOAD.duration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(LOAD.delay)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="START" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.net.pop3.POP3Client;
import com.zimbra.jmeter.Zimbra;
import com.zimbra.jmeter.Command;

Zimbra pop = vars.getObject(&quot;POP&quot;);
ArrayList commands = pop.getcommands();

vars.putObject(&quot;COMMANDS&quot;,commands);
// generate command DELAY
if (props.get(&quot;LOAD.POP.userduration&quot;) == null || commands.size() == 0) {
  vars.putObject(&quot;DELAY&quot;,&quot;0&quot;);
} else {
  int delay = Integer.parseInt(props.get(&quot;LOAD.POP.userduration&quot;))*1000/commands.size();
  vars.putObject(&quot;DELAY&quot;,delay.toString());
}
// initialize CONTINUE
if (commands.size() &gt; 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;true&quot;);
} else {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}

//Create POP conncection and store for all future use
//log.info(&quot;This is the user: &quot;+vars.get(&quot;USER&quot;));
POP3Client pc = new POP3Client();
try {
  log.info(&quot;POP connection: &quot;+props.get(&quot;POP.server&quot;)+&quot; &quot;+props.get(&quot;POP.port&quot;));
  pc.connect(props.get(&quot;POP.server&quot;),Integer.parseInt(props.get(&quot;POP.port&quot;)));
} catch (Exception x) {
  log.info(&quot;connect error: &quot;,x);
}
vars.putObject(&quot;POP3CLIENT&quot;,pc);

//log.info(Thread.currentThread().getName()+&quot; &quot;+ctx.getThreadNum().toString()+&quot; START&quot;);
log.info(Thread.currentThread().getName()+&quot; START&quot;);
//Capture POP response and include as sampler Response
SampleResult.setResponseData(pc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Run_Commands" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Next_Command" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Command;

ArrayList commands = vars.getObject(&quot;COMMANDS&quot;);
if (commands.size() &gt; 0) {
  //log.info(&quot;Testing: &quot;+commands);
  Command c = commands.remove(0);
  vars.put(&quot;COMMAND&quot;,c.getName());
  for (Map.Entry a: c.argsSet()) {
  	vars.put(a.getKey(),a.getValue());
  }
  //log.info(vars.get(&quot;COMMAND&quot;));
}
if (commands.size() == 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Command_Execution" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Command Delay" enabled="true">
              <stringProp name="ConstantTimer.delay">${DELAY}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Commands" enabled="true">
              <stringProp name="SwitchController.value">${COMMAND}</stringProp>
            </SwitchController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(Thread.currentThread().getName()+&quot; &quot;+vars.get(&quot;COMMAND&quot;)+&quot; not currently supported&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LIST" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.pop3.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
POP3Client pc = vars.getObject(&quot;POP3CLIENT&quot;);

try {
  //POP3MessageInfo[] x = pc.listMessages();
  pc.sendCommand(&quot;LIST&quot;);
  pc.getAdditionalReply();
  log.info(Thread.currentThread().getName()+&quot; LIST&quot;);
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; LIST: &quot;+e);
}

// store the response mailboxes for posible use in other commands
// available in the jmeter variable MAILBOXES
//ArrayList mailboxes = new ArrayList();
//String[] lines = icw.toString().split(&quot;\\r?\\n&quot;);
//for (String s: lines) {
//	// * LIST (\HasNoChildren \Drafts) &quot;/&quot; &quot;Drafts&quot;
//	Pattern p = Pattern.compile(&quot;\\* LIST \\(([^\\)]+)\\) \&quot;([^\&quot;]+)\&quot; \&quot;([^\&quot;]+)\&quot;&quot;);
//	Matcher m = p.matcher(s);
//     while (m.find()) {
//	  //log.info(m.group(2)+m.group(3));
//	  mailboxes.add(m.group(2)+m.group(3));
//     }
//}
//vars.putObject(&quot;MAILBOXES&quot;,mailboxes);
// pop succesful response starts with &quot;+OK&quot;
if (!pc.getReplyString().startsWith(&quot;+OK&quot;)) {
  SampleResult.setSuccessful(false);
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  IsSuccess=false;
}
SampleResult.setResponseData(pc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="USER" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.pop3.POP3Client;
POP3Client pc = vars.getObject(&quot;POP3CLIENT&quot;);

try {
  pc.sendCommand(&quot;USER&quot;,vars.get(&quot;USER&quot;));
  log.info(Thread.currentThread().getName()+&quot; USER&quot;);
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; USER: &quot;+e);
}
// pop succesful response starts with &quot;+OK&quot;
if (!pc.getReplyString().startsWith(&quot;+OK&quot;)) {
  SampleResult.setSuccessful(false);
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  IsSuccess=false;
}
SampleResult.setResponseData(pc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="PASS" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.pop3.POP3Client;
POP3Client pc = vars.getObject(&quot;POP3CLIENT&quot;);

try {
  pc.sendCommand(&quot;PASS&quot;,vars.get(&quot;PASS&quot;));
  log.info(Thread.currentThread().getName()+&quot; PASS&quot;);
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; PASS: &quot;+e);
}
// pop succesful response starts with &quot;+OK&quot;
if (!pc.getReplyString().startsWith(&quot;+OK&quot;)) {
  SampleResult.setSuccessful(false);
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  IsSuccess=false;
}
SampleResult.setResponseData(pc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="QUIT" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.pop3.POP3Client;
POP3Client pc = vars.getObject(&quot;POP3CLIENT&quot;);

try {
  pc.logout();
  log.info(Thread.currentThread().getName()+&quot; QUIT&quot;);
} catch (Exception e) {
  SampleResult.setSuccessful(false);
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  IsSuccess=false;
  log.info(Thread.currentThread().getName()+&quot; QUIT: &quot;+e);
}
// pop succesful response starts with &quot;+OK&quot;
if (!pc.getReplyString().startsWith(&quot;+OK&quot;)) {
  SampleResult.setSuccessful(false);
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  IsSuccess=false;
}
SampleResult.setResponseData(pc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="END" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.net.pop3.POP3Client;
POP3Client pc = vars.getObject(&quot;POP3CLIENT&quot;);

try {
  pc.disconnect();
  log.info(Thread.currentThread().getName()+&quot; END&quot;);
} catch (Exception e) {
  log.info(Thread.currentThread().getName()+&quot; END: &quot;+e);
}

SampleResult.setResponseData(pc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Appointments" enabled="true">
        <stringProp name="filename">${__P(PROFILE.CalDAV.appointments)}</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">APPTTEMPLATE</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
      </CSVDataSet>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="CalDAV Setup" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">import com.zimbra.jmeter.Zimbra;
//debug();
Zimbra cd = new Zimbra(props,&quot;CalDAV&quot;);
vars.putObject(&quot;CalDAV&quot;,cd);</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CalDAV" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(LOAD.CalDAV.loopcount)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(LOAD.CalDAV.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(LOAD.CalDAV.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1505165237000</longProp>
        <longProp name="ThreadGroup.end_time">1505165237000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(LOAD.duration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(LOAD.delay)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="CalDAV HTTP Config" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(HTTP.server)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(HTTP.port)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(HTTP.protocol)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/dav/${USER}@${__P(ZIMBRA.domain)}/Calendar</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="CalDAV Authentication" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://${__P(HTTP.server)}</stringProp>
              <stringProp name="Authorization.username">${USER}</stringProp>
              <stringProp name="Authorization.password">${PASS}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="START" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Zimbra;
import com.zimbra.jmeter.Command;

Zimbra cd = vars.getObject(&quot;CalDAV&quot;);
ArrayList commands = cd.getcommands();

vars.putObject(&quot;COMMANDS&quot;,commands);
// generate command DELAY
if (props.get(&quot;LOAD.CalDAV.userduration&quot;) == null || commands.size() == 0) {
  vars.putObject(&quot;DELAY&quot;,&quot;0&quot;);
} else {
  int delay = Integer.parseInt(props.get(&quot;LOAD.CalDAV.userduration&quot;))*1000/commands.size();
  vars.putObject(&quot;DELAY&quot;,delay.toString());
}
// initialize CONTINUE
if (commands.size() &gt; 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;true&quot;);
} else {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}
// initialize APPTUUID and APPTURL
vars.put(&quot;APPTUUID&quot;,UUID.randomUUID().toString());
vars.put(&quot;APPTURL&quot;,&quot;/dav/&quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;ZIMBRA.domain&quot;)+&quot;/Calendar/&quot;+vars.get(&quot;APPTUUID&quot;)+&quot;.ics&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Run_Commands" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Next_Command" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Command;

ArrayList commands = vars.getObject(&quot;COMMANDS&quot;);
if (commands.size() &gt; 0) {
  //log.info(&quot;Testing: &quot;+commands);
  Command c = commands.remove(0);
  vars.put(&quot;COMMAND&quot;,c.getName());
  for (Map.Entry a: c.argsSet()) {
  	vars.put(a.getKey(),a.getValue());
  }
  if (c.getName().equals(&quot;PUT&quot;)) {
  	if (c.getArg(&quot;APPTBODY&quot;) == null) {
  		vars.put(&quot;APPTBODY&quot;,vars.get(&quot;APPTTEMPLATE&quot;));
  	}
  }
  //log.info(vars.get(&quot;COMMAND&quot;));
}
if (commands.size() == 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Command_Execution" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Command Delay" enabled="true">
              <stringProp name="ConstantTimer.delay">${DELAY}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Commands" enabled="true">
              <stringProp name="SwitchController.value">${COMMAND}</stringProp>
            </SwitchController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(Thread.currentThread().getName()+&quot; &quot;+vars.get(&quot;COMMAND&quot;)+&quot; not currently supported&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${APPTURL}</stringProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${APPTURL}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="APPTBODY" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">String m = prev.getResponseDataAsString();
vars.put(&quot;APPTBODY&quot;,m);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PROPFIND" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">PROPFIND</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Depth</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="APPTURL" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">APPTURL</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//D:href[not(../D:propstat/D:prop/D:resourcetype/D:collection)]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">true</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__evalVar(APPTBODY)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${APPTURL}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/calendar</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Modify" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String tmp = vars.get(&quot;APPTBODY&quot;);
if (vars.get(&quot;DTEND&quot;) != null) {
  tmp=tmp.replaceAll(&quot;(?s)DTEND;TZID=([^\\s]*)&quot;,&quot;DTEND;TZID=&quot;+vars.get(&quot;DTEND&quot;));
  vars.put(&quot;APPTBODY&quot;,tmp);
}</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug_Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cards" enabled="true">
        <stringProp name="filename">${__P(PROFILE.CardDAV.cards)}</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">CARDTEMPLATE</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
      </CSVDataSet>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="CardDAV Setup" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">import com.zimbra.jmeter.Zimbra;
//debug();
Zimbra cd = new Zimbra(props,&quot;CardDAV&quot;);
vars.putObject(&quot;CardDAV&quot;,cd);</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CardDAV" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(LOAD.CardDAV.loopcount)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(LOAD.CardDAV.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(LOAD.CardDAV.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1505165237000</longProp>
        <longProp name="ThreadGroup.end_time">1505165237000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(LOAD.duration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(LOAD.delay)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="CardDAV HTTP Config" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(HTTP.server)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(HTTP.port)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(HTTP.protocol)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/dav/${USER}@${__P(ZIMBRA.domain)}/Contacts</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="CardDAV Authentication" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://${__P(HTTP.server)}</stringProp>
              <stringProp name="Authorization.username">${USER}</stringProp>
              <stringProp name="Authorization.password">${PASS}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="START" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Zimbra;
import com.zimbra.jmeter.Command;

Zimbra cd = vars.getObject(&quot;CardDAV&quot;);
ArrayList commands = cd.getcommands();

vars.putObject(&quot;COMMANDS&quot;,commands);
// generate command DELAY
if (props.get(&quot;LOAD.CardDAV.userduration&quot;) == null || commands.size() == 0) {
  vars.putObject(&quot;DELAY&quot;,&quot;0&quot;);
} else {
  int delay = Integer.parseInt(props.get(&quot;LOAD.CardDAV.userduration&quot;))*1000/commands.size();
  vars.putObject(&quot;DELAY&quot;,delay.toString());
}
// initialize CONTINUE
if (commands.size() &gt; 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;true&quot;);
} else {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}
// initialize CARDUUID and CARDURL
vars.put(&quot;CARDUUID&quot;,UUID.randomUUID().toString());
vars.put(&quot;CARDURL&quot;,&quot;/dav/&quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;ZIMBRA.domain&quot;)+&quot;/Contacts/&quot;+vars.get(&quot;CARDUUID&quot;)+&quot;.vcf&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Run_Commands" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Next_Command" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Command;

ArrayList commands = vars.getObject(&quot;COMMANDS&quot;);
if (commands.size() &gt; 0) {
  //log.info(&quot;Testing: &quot;+commands);
  Command c = commands.remove(0);
  vars.put(&quot;COMMAND&quot;,c.getName());
  for (Map.Entry a: c.argsSet()) {
  	vars.put(a.getKey(),a.getValue());
  }
  if (c.getName().equals(&quot;PUT&quot;)) {
  	if (c.getArg(&quot;CARDBODY&quot;) == null) {
  		vars.put(&quot;CARDBODY&quot;,vars.get(&quot;CARDTEMPLATE&quot;));
  	}
  }
  //log.info(vars.get(&quot;COMMAND&quot;));
}
if (commands.size() == 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug_Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">true</boolProp>
          </DebugSampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Command_Execution" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Command Delay" enabled="true">
              <stringProp name="ConstantTimer.delay">${DELAY}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Commands" enabled="true">
              <stringProp name="SwitchController.value">${COMMAND}</stringProp>
            </SwitchController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(Thread.currentThread().getName()+&quot; &quot;+vars.get(&quot;COMMAND&quot;)+&quot; not currently supported&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CARDURL}</stringProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CARDURL}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="APPTBODY" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">String m = prev.getResponseDataAsString();
vars.put(&quot;APPTBODY&quot;,m);
//log.info(&quot;BODY: &quot;+vars.get(&quot;APPTBODY&quot;));</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PROPFIND" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">PROPFIND</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Depth</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="CARDURL" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">CARDURL</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//D:href[not(../D:propstat/D:prop/D:resourcetype/D:collection)]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">true</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__evalVar(CARDBODY)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CARDURL}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/vcard</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Modify" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String tmp = vars.get(&quot;CARDBODY&quot;);
if (vars.get(&quot;N&quot;) != null) {
  String [] fields = vars.get(&quot;N&quot;).split(&quot;;&quot;);
  tmp=tmp.replaceAll(&quot;(?s)\nN:([^\\n]*)&quot;,&quot;\nN:&quot;+vars.get(&quot;N&quot;));
  tmp=tmp.replaceAll(&quot;(?s)\nFN:([^\\n]*)&quot;,&quot;\nFN:&quot;+fields[0]+&quot; &quot;+fields[1]);
  vars.put(&quot;CARDBODY&quot;,tmp);
}</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="ZSOAP HTTP Config" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${__P(HTTP.server)}</stringProp>
        <stringProp name="HTTPSampler.port">${__P(HTTP.port)}</stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.implementation">Java</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ConfigTestElement guiclass="SimpleConfigGui" testclass="ConfigTestElement" testname="Simple Config Element" enabled="true">
        <stringProp name="soaptest_folderName">soaptest</stringProp>
        <stringProp name="soaptest_tagName">soaptag</stringProp>
        <stringProp name="soaptest_SearchFolderName">soapsearchtest</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="ZSOAP Setup" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">import com.zimbra.jmeter.Zimbra;
//debug();
Zimbra soap = new Zimbra(props,&quot;ZSOAP&quot;);
vars.putObject(&quot;ZSOAP&quot;,soap);

String url = &quot;https://&quot;+props.get(&quot;HTTP.server&quot;);
String admin = url+&quot;:7071/service/admin/soap&quot;;
vars.put(&quot;ADMIN&quot;,admin);
if (!props.get(&quot;HTTP.port&quot;).equals(&quot;&quot;) ) {
  url = url + &quot;:&quot; + props.get(&quot;HTTP.port&quot;);
}
url = url+&quot;/service/soap&quot;;
//log.info(url);
vars.put(&quot;URL&quot;,url);</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ZSOAP User" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(LOAD.ZSOAP.loopcount)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(LOAD.ZSOAP.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(LOAD.ZSOAP.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1505165237000</longProp>
        <longProp name="ThreadGroup.end_time">1505165237000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(LOAD.duration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(LOAD.delay)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="randomVariableNameGenerator" enabled="true">
          <stringProp name="BeanShellSampler.query">vars.put(&quot;soaptest_folderName&quot;,&quot;soaptest_${__Random(1,10000000)}&quot;);
vars.put(&quot;soaptest_tagName&quot;,&quot;soaptag_${__Random(1,10000000)}&quot;);
vars.put(&quot;soaptest_SearchFolderName&quot;,&quot;soapsearchtest_${__Random(1,10000000)}&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="START" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Zimbra;
import com.zimbra.jmeter.Command;

Zimbra soap = vars.getObject(&quot;ZSOAP&quot;);
ArrayList commands = soap.getcommands();

vars.putObject(&quot;COMMANDS&quot;,commands);
// generate command DELAY
if (props.get(&quot;LOAD.ZSOAP.userduration&quot;) == null || commands.size() == 0) {
  vars.putObject(&quot;DELAY&quot;,&quot;0&quot;);
} else {
  int delay = Integer.parseInt(props.get(&quot;LOAD.ZSOAP.userduration&quot;))*1000/commands.size();
  vars.putObject(&quot;DELAY&quot;,delay.toString());
}
// initialize CONTINUE
if (commands.size() &gt; 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;true&quot;);
} else {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
} </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Run_Commands" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Next_Command" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Command;

ArrayList commands = vars.getObject(&quot;COMMANDS&quot;);
if (commands.size() &gt; 0) {
  //log.info(&quot;Testing: &quot;+commands);
  Command c = commands.remove(0);
  vars.put(&quot;COMMAND&quot;,c.getName());
  for (Map.Entry a: c.argsSet()) {
  	vars.put(a.getKey(),a.getValue());
  }
  //Should find better home and approach for this but for now default types
  if (c.getName().equals(&quot;FolderActionRequest&quot;)) {
    if (c.getArg(&quot;FOLDERACTIONTYPE&quot;) == null) {
    	 vars.put(&quot;FOLDERACTIONTYPE&quot;,&quot;read&quot;);
    }
  }
  if (c.getName().equals(&quot;GetFolderRequest&quot;)) {
    if (c.getArg(&quot;PATH&quot;) == null) {
      vars.put(&quot;PATH&quot;,&quot;/inbox&quot;);
    }
  }
  if (c.getName().equals(&quot;TagActionRequest&quot;)) {
    if (c.getArg(&quot;TAGACTIONTYPE&quot;) == null) {
      vars.put(&quot;TAGACTIONTYPE&quot;,&quot;read&quot;);
    }
  }
  //log.info(vars.get(&quot;COMMAND&quot;));
}
if (commands.size() == 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Command_Execution" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Command Delay" enabled="true">
              <stringProp name="ConstantTimer.delay">${DELAY}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Commands" enabled="true">
              <stringProp name="SwitchController.value">${COMMAND}</stringProp>
            </SwitchController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(Thread.currentThread().getName()+&quot; &quot;+vars.get(&quot;COMMAND&quot;)+&quot; not currently supported&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ApplyFilterRulesRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;ApplyFilterRulesRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;filterRules&gt;&lt;filterRule name=&quot;${FILTER}&quot;/&gt;&lt;/filterRules&gt;&#xd;
      &lt;query&gt;test&lt;/query&gt;&#xd;
    &lt;/ApplyFilterRulesRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt; </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="AuthRequest" enabled="true">
                <stringProp name="SwitchController.value">${AUTHTYPE}</stringProp>
              </SwitchController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="user" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
       &lt;authToken/&gt;&#xd;
       &lt;nosession/&gt;&#xd;
       &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
   &lt;AuthRequest xmlns=&quot;urn:zimbraAccount&quot; csrfTokenSecured=&quot;1&quot;&gt;&#xd;
     &lt;account by=&quot;name&quot;&gt;${USER}&lt;/account&gt;&#xd;
     &lt;password&gt;${PASS}&lt;/password&gt;&#xd;
   &lt;/AuthRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="AUTHTOKEN" enabled="true">
                    <stringProp name="XPathExtractor.default"></stringProp>
                    <stringProp name="XPathExtractor.refname">AUTHTOKEN</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">//authToken</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">false</boolProp>
                    <stringProp name="Scope.variable">authToken</stringProp>
                    <boolProp name="XPathExtractor.quiet">false</boolProp>
                    <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  </XPathExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="admin" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
       &lt;authToken/&gt;&#xd;
       &lt;nosession/&gt;&#xd;
       &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
   &lt;AuthRequest xmlns=&quot;urn:zimbraAdmin&quot; csrfTokenSecured=&quot;1&quot;&gt;&#xd;
     &lt;account by=&quot;name&quot;&gt;${__P(HTTP.admin.user)}&lt;/account&gt;&#xd;
     &lt;password&gt;${__P(HTTP.admin.pass)}&lt;/password&gt;&#xd;
   &lt;/AuthRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${ADMIN}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ADMINAUTHTOKEN" enabled="true">
                    <stringProp name="XPathExtractor.default"></stringProp>
                    <stringProp name="XPathExtractor.refname">ADMINAUTHTOKEN</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">//authToken</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">false</boolProp>
                    <stringProp name="Scope.variable">authToken</stringProp>
                    <boolProp name="XPathExtractor.quiet">false</boolProp>
                    <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  </XPathExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AutoCompleteRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;AutoCompleteRequest xmlns=&quot;urn:zimbraMail&quot; name=&quot;user&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BrowseRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;BrowseRequest browseBy=&quot;domains&quot; xmlns=&quot;urn:zimbraMail&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckSpellingRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;CheckSpellingRequest xmlns=&quot;urn:zimbraMail&quot;&gt;This is a spelling chck tert.&lt;/CheckSpellingRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ContactActionRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;ContactActionRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;action id=&quot;${CONTACT}&quot; op=&quot;tag&quot; tn=&quot;test&quot;/&gt;&#xd;
    &lt;/ContactActionRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ConvActionRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;ConvActionRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;action id=&quot;${CONVERSATION}&quot; op=&quot;read&quot;/&gt;&#xd;
    &lt;/ConvActionRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateAppointmentRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
&lt;CreateAppointmentRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;m&gt;&#xd;
        &lt;inv&gt;&#xd;
          &lt;comp name=&quot;Subject of meeting perf zsoap testing&quot; status=&quot;CONF&quot; fb=&quot;B&quot; allDay=&quot;0&quot; transp=&quot;O&quot;&gt;&#xd;
            &lt;or a=&quot;${USER}@${__P(ZIMBRA.domain)}&quot;&gt;&lt;/or&gt;&#xd;
            &lt;at a=&quot;${TOUSER}@${__P(ZIMBRA.domain)}&quot; rsvp=&quot;1&quot; ptst=&quot;NE&quot; role=&quot;REQ&quot;&gt;&lt;/at&gt;&#xd;
            &lt;s tz=&quot;(GMT-08.00) Pacific Time (US &amp;amp; Canada) / Tijuana&quot; d=&quot;20180816T040000&quot;&gt;&lt;/s&gt;&#xd;
            &lt;e d=&quot;20180816T050000&quot; tz=&quot;(GMT-08.00) Pacific Time (US &amp;amp; Canada) / Tijuana&quot;&gt;&lt;/e&gt;&#xd;
          &lt;/comp&gt;&#xd;
        &lt;/inv&gt;&#xd;
        &lt;e t=&quot;t&quot; a=&quot;${TOUSER}@${__P(ZIMBRA.domain)}&quot;&gt;&lt;/e&gt;&#xd;
        &lt;su&gt;Subject of meeting perf zsoap testing&lt;/su&gt;&#xd;
        &lt;mp ct=&quot;text/plain&quot;&gt;&#xd;
          &lt;content&gt;Content of the message is perf zsoap testing&lt;/content&gt;&#xd;
        &lt;/mp&gt;&#xd;
      &lt;/m&gt;&#xd;
    &lt;/CreateAppointmentRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateContactRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;CreateContactRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;cn&gt;&#xd;
        &lt;a n=&quot;lastName&quot;&gt;Testing&lt;/a&gt;&#xd;
      &lt;/cn&gt;&#xd;
    &lt;/CreateContactRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateFolderRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;CreateFolderRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;folder name=&quot;${soaptest_folderName}&quot;/&gt;&#xd;
    &lt;/CreateFolderRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateSearchFolderRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;CreateSearchFolderRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;search name=&quot;${soaptest_SearchFolderName}&quot; query=&quot;Testing&quot; l=&quot;1&quot;/&gt;&#xd;
    &lt;/CreateSearchFolderRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateTagRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;CreateTagRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;tag name=&quot;${soaptest_tagName}&quot;/&gt;&#xd;
    &lt;/CreateTagRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateWaitSetRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
     &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;CreateWaitSetRequest xmlns=&quot;urn:zimbraMail&quot; defTypes=&quot;all&quot;&gt;&#xd;
      &lt;add/&gt; &#xd;
    &lt;/CreateWaitSetRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="WAITSETID" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">WAITSETID</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//CreateWaitSetResponse/@waitSet</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <stringProp name="Scope.variable">authToken</stringProp>
                  <boolProp name="XPathExtractor.quiet">false</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="WAITSETSEQ" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">WAITSETSEQ</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//CreateWaitSetResponse/@seq</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <stringProp name="Scope.variable">authToken</stringProp>
                  <boolProp name="XPathExtractor.quiet">false</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DestroyWaitSetRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;DestroyWaitSetRequest xmlns=&quot;urn:zimbraMail&quot; waitSet=&quot;${WAITSETID}&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DiscoverRightsRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;DiscoverRightsRequest xmlns=&quot;urn:zimbraAccount&quot;&gt;&#xd;
      &lt;right&gt;sendAs&lt;/right&gt;&#xd;
    &lt;/DiscoverRightsRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DismissCalendarItemAlarmRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;DismissCalendarItemAlarmRequest xmlns=&quot;urn:zimbraMail&quot;/&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EndSessionRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;EndSessionRequest xmlns=&quot;urn:zimbraAccount&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FlushCacheRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${ADMINAUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;FlushCacheRequest xmlns=&quot;urn:zimbraAdmin&quot;&gt;&#xd;
      &lt;cache type=&quot;account&quot;&gt;&#xd;
        &lt;entry by=&quot;name&quot;&gt;${USER}&lt;/entry&gt;&#xd;
      &lt;/cache&gt;&#xd;
    &lt;/FlushCacheRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${ADMIN}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="FolderActionRequest" enabled="true">
                <stringProp name="SwitchController.value">${FOLDERACTIONTYPE}</stringProp>
              </SwitchController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="read" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;FolderActionRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;action op=&quot;read&quot; id=&quot;${FOLDER}&quot;/&gt;&#xd;
    &lt;/FolderActionRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;FolderActionRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;action op=&quot;delete&quot; id=&quot;${FOLDER}&quot;/&gt;&#xd;
    &lt;/FolderActionRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAccountRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${ADMINAUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetAccountRequest xmlns=&quot;urn:zimbraAdmin&quot;&gt;&#xd;
      &lt;account by=&quot;name&quot;&gt;${USER}&lt;/account&gt;&#xd;
    &lt;/GetAccountRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${ADMIN}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ACCOUNTID" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">ACCOUNTID</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//account/@id</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAccountInfoRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetAccountInfoRequest xmlns=&quot;urn:zimbraAccount&quot;&gt;&#xd;
      &lt;account by=&quot;name&quot;&gt;${USER}&lt;/account&gt;&#xd;
    &lt;/GetAccountInfoRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAggregateQuotaUsageOnServerRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${ADMINAUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetAggregateQuotaUsageOnServerRequest xmlns=&quot;urn:zimbraAdmin&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${ADMIN}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAppointmentRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetAppointmentRequest id=&quot;${APPOINTMENT}&quot; xmlns=&quot;urn:zimbraMail&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAvailableCsvFormatsRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetAvailableCsvFormatsRequest xmlns=&quot;urn:zimbraAccount&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAvailableLocalesRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetAvailableLocalesRequest xmlns=&quot;urn:zimbraAccount&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAvailableSkinsRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetAvailableSkinsRequest xmlns=&quot;urn:zimbraAccount&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetContactsRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetContactsRequest xmlns=&quot;urn:zimbraMail&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="CONTACT" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">CONTACT</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//cn/@id</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetConvRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetConvRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;c id=&quot;${CONVERSATION}&quot;/&gt;&#xd;
    &lt;/GetConvRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCosRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${ADMINAUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetCosRequest xmlns=&quot;urn:zimbraAdmin&quot;&gt;&#xd;
      &lt;cos by=&quot;name&quot;&gt;default&lt;/cos&gt;&#xd;
    &lt;/GetCosRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${ADMIN}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetDataSourcesRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetDataSourcesRequest xmlns=&quot;urn:zimbraMail&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${ADMIN}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetDomainInfoRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken/&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetDomainInfoRequest xmlns=&quot;urn:zimbraAdmin&quot;&gt;&#xd;
      &lt;domain by=&quot;name&quot;&gt;zimbra07.loadtest.synacor.ocm&lt;/domain&gt;&#xd;
    &lt;/GetDomainInfoRequest&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${ADMIN}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFilterRulesRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetFilterRulesRequest xmlns=&quot;urn:zimbraMail&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="FILTER" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">FILTER</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//filterRule/@name</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="GetFolderRequest" enabled="true">
                <stringProp name="SwitchController.value">${PATH}</stringProp>
              </SwitchController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FolderRequest" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetFolderRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;folder path=&quot;/${soaptest_folderName}&quot;/&gt;&#xd;
    &lt;/GetFolderRequest&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="FOLDER" enabled="true">
                    <stringProp name="XPathExtractor.default"></stringProp>
                    <stringProp name="XPathExtractor.refname">FOLDER</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">//folder/@id | //search/@id</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">false</boolProp>
                    <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  </XPathExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchFolderRequest" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetFolderRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;folder path=&quot;/${soaptest_SearchFolderName}&quot;/&gt;&#xd;
    &lt;/GetFolderRequest&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="FOLDER" enabled="true">
                    <stringProp name="XPathExtractor.default"></stringProp>
                    <stringProp name="XPathExtractor.refname">FOLDER</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">//folder/@id | //search/@id</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">false</boolProp>
                    <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  </XPathExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="default" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetFolderRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;folder path=&quot;/&quot;/&gt;&#xd;
    &lt;/GetFolderRequest&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="FOLDER" enabled="true">
                    <stringProp name="XPathExtractor.default"></stringProp>
                    <stringProp name="XPathExtractor.refname">FOLDER</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">//folder/@id | //search/@id</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">false</boolProp>
                    <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  </XPathExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFreeBusyRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
       &lt;GetFreeBusyRequest s=&quot;1501570800000&quot; e=&quot;1504249200000&quot; xmlns=&quot;urn:zimbraMail&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetInfoRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
       &lt;GetInfoRequest xmlns=&quot;urn:zimbraAccount&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMailboxRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${ADMINAUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetMailboxRequest xmlns=&quot;urn:zimbraAdmin&quot;&gt;&#xd;
      &lt;mbox id=&quot;${ACCOUNTID}&quot;/&gt;&#xd;
    &lt;/GetMailboxRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${ADMIN}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMailboxMetadataRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetMailboxMetadataRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;meta section=&quot;zwc:test&quot;/&gt;&#xd;
    &lt;/GetMailboxMetadataRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMiniCalRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetMiniCalRequest s=&quot;1501570800000&quot; e=&quot;1504249200000&quot; xmlns=&quot;urn:zimbraMail&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMsgRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetMsgRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;m id=&quot;${MESSAGE}&quot;/&gt;&#xd;
    &lt;/GetMsgRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetPrefsRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetPrefsRequest xmlns=&quot;urn:zimbraAccount&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetRightsRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetRightsRequest xmlns=&quot;urn:zimbraAccount&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetShareInfoRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetShareInfoRequest xmlns=&quot;urn:zimbraAccount&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTagRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetTagRequest xmlns=&quot;urn:zimbraMail&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TAG" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">TAG</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//tag/@id</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetWhiteBlackListRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetWhiteBlackListRequest xmlns=&quot;urn:zimbraAccount&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ModifyAccountRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${ADMINAUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;ModifyAccountRequest id=&quot;${ACCOUNTID}&quot; xmlns=&quot;urn:zimbraAdmin&quot;&gt;&#xd;
      &lt;a n=&quot;zimbraPrefIMFlashTitle&quot;&gt;FALSE&lt;/a&gt;&#xd;
    &lt;/ModifyAccountRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${ADMIN}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ModifyContactRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;ModifyContactRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;cn id=&quot;${CONTACT}&quot;&gt;&#xd;
        &lt;a n=&quot;lastName&quot;&gt;Testing&lt;/a&gt;&#xd;
      &lt;/cn&gt;&#xd;
    &lt;/ModifyContactRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ModifyFilterRulesRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;ModifyFilterRulesRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;filterRules&gt;&#xd;
        &lt;filterRule name=&quot;Testing&quot; active=&quot;0&quot;&gt;&#xd;
          &lt;filterTests condition=&quot;anyof&quot;&gt;&#xd;
            &lt;bodyTest value=&quot;Testing&quot;/&gt;&#xd;
          &lt;/filterTests&gt;&#xd;
          &lt;filterActions&gt;&#xd;
            &lt;actionDiscard/&gt;&#xd;
          &lt;/filterActions&gt;&#xd;
        &lt;/filterRule&gt;&#xd;
      &lt;/filterRules&gt;&#xd;
    &lt;/ModifyFilterRulesRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ModifyPrefsRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;ModifyPrefsRequest xmlns=&quot;urn:zimbraAccount&quot;&gt;&#xd;
      &lt;pref name=&quot;zimbraPrefIMFlashIcon&quot;&gt;FALSE&lt;/pref&gt;&#xd;
    &lt;/ModifyPrefsRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="MsgActionRequest" enabled="true">
                <stringProp name="SwitchController.value">${MSGACTIONTYPE}</stringProp>
              </SwitchController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;MsgActionRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;action id=&quot;${MESSAGE}&quot; op=&quot;delete&quot;/&gt;&#xd;
    &lt;/MsgActionRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="read" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;MsgActionRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;action id=&quot;${MESSAGE}&quot; op=&quot;read&quot;/&gt;&#xd;
    &lt;/MsgActionRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tag" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;MsgActionRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;action id=&quot;${MESSAGE}&quot; op=&quot;tag&quot; tn=&quot;testing&quot;/&gt;&#xd;
    &lt;/MsgActionRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NoOpRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;NoOpRequest xmlns=&quot;urn:zimbraMail&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RankingActionRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;RankingActionRequest op=&quot;reset&quot; xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;action op=&quot;reset&quot;/&gt;&#xd;
    &lt;/RankingActionRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SaveDraftRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;SaveDraftRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;m su=&quot;Save Draft Test&quot;&gt;&#xd;
        &lt;content&gt;Save Draft Request Test Case&lt;/content&gt;&#xd;
      &lt;/m&gt;&#xd;
    &lt;/SaveDraftRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchConvRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;SearchConvRequest cid=&quot;${CONVERSATION}&quot; xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;query&gt;Test&lt;/query&gt;&#xd;
    &lt;/SearchConvRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="SearchRequest" enabled="true">
                <stringProp name="SwitchController.value">${SEARCHTYPE}</stringProp>
              </SwitchController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="message" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;SearchRequest types=&quot;${SEARCHTYPE}&quot; xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;query&gt;${__evalVar(SEARCH)}&lt;/query&gt;&#xd;
    &lt;/SearchRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="COMPNUM" enabled="true">
                    <stringProp name="XPathExtractor.default"></stringProp>
                    <stringProp name="XPathExtractor.refname">COMPNUM</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">//comp/@compNum</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">false</boolProp>
                    <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  </XPathExtractor>
                  <hashTree/>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                    <stringProp name="XPathExtractor.default"></stringProp>
                    <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">//m/@id</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">false</boolProp>
                    <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  </XPathExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="appointment" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;SearchRequest types=&quot;${SEARCHTYPE}&quot; xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;query&gt;${__evalVar(SEARCH)}&lt;/query&gt;&#xd;
    &lt;/SearchRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="APPOINTMENT" enabled="true">
                    <stringProp name="XPathExtractor.default"></stringProp>
                    <stringProp name="XPathExtractor.refname">APPOINTMENT</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">//appt/@id</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">false</boolProp>
                    <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  </XPathExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="conversation" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;SearchRequest types=&quot;${SEARCHTYPE}&quot; xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;query&gt;${__evalVar(SEARCH)}&lt;/query&gt;&#xd;
    &lt;/SearchRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="CONVERSATION" enabled="true">
                    <stringProp name="XPathExtractor.default"></stringProp>
                    <stringProp name="XPathExtractor.refname">CONVERSATION</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">//c/@id</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">false</boolProp>
                    <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  </XPathExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SendDeliveryReportRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;SendDeliveryReportRequest mid=&quot;${MESSAGE}&quot; xmlns=&quot;urn:zimbraMail&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SendInviteReplyRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;SendInviteReplyRequest id=&quot;${MESSAGE}&quot; compNum=&quot;${COMPNUM}&quot; verb=&quot;ACCEPT&quot; xmlns=&quot;urn:zimbraMail&quot;/&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SendMsgRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;SendMsgRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;m su=&quot;Hello World&quot;&gt;&#xd;
        &lt;e a=&quot;${USER}@${__P(ZIMBRA.domain)}&quot; t=&quot;f&quot;/&gt;&#xd;
        &lt;e a=&quot;${USER}@${__P(ZIMBRA.domain)}&quot; t=&quot;t&quot;/&gt;&#xd;
        &lt;mp ct=&quot;text/plain&quot;&gt;&#xd;
          &lt;content&gt;This is test message from zsoap jmeter test&lt;/content&gt;&#xd;
        &lt;/mp&gt;&#xd;
      &lt;/m&gt;&#xd;
    &lt;/SendMsgRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SetCustomMetadataRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;SetCustomMetadataRequest id=&quot;${MESSAGE}&quot; xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;meta section=&quot;zwc:test&quot;&gt;&#xd;
        &lt;a n=&quot;foo&quot;&gt;bar&lt;/a&gt;&#xd;
      &lt;/meta&gt;&#xd;
    &lt;/SetCustomMetadataRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SetMailboxMetadataRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;SetMailboxMetadataRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;meta section=&quot;zwc:test&quot;&gt;&#xd;
        &lt;a n=&quot;foo&quot;&gt;bar&lt;/a&gt;&#xd;
      &lt;/meta&gt;&#xd;
    &lt;/SetMailboxMetadataRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SnoozeCalendarItemAlarmRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;SnoozeCalendarItemAlarmRequest xmlns=&quot;urn:zimbraMail&quot;/&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SyncGalRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;SyncGalRequest xmlns=&quot;urn:zimbraAccount&quot;${__BeanShell(if (vars.get(&quot;GALTOKEN&quot;) == null) { return &quot;&quot;; } else {return &quot; token=\&quot;&quot;+vars.get(&quot;GALTOKEN&quot;)+&quot;\&quot;&quot;;})}/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="GALTOKEN" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">GALTOKEN</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//SyncGalResponse/@token</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <stringProp name="Scope.variable">authToken</stringProp>
                  <boolProp name="XPathExtractor.quiet">false</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SyncRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;SyncRequest xmlns=&quot;urn:zimbraMail&quot;${__BeanShell(if (vars.get(&quot;SYNCTOKEN&quot;) == null) { return &quot;&quot;; } else {return &quot; token=\&quot;&quot;+vars.get(&quot;SYNCTOKEN&quot;)+&quot;\&quot;&quot;;})}/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="SYNCTOKEN" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">SYNCTOKEN</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//SyncResponse/@token</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <stringProp name="Scope.variable">authToken</stringProp>
                  <boolProp name="XPathExtractor.quiet">false</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="TagActionRequest" enabled="true">
                <stringProp name="SwitchController.value">${TAGACTIONTYPE}</stringProp>
              </SwitchController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="read" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;TagActionRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;action id=&quot;${TAG}&quot; op=&quot;read&quot;/&gt;&#xd;
    &lt;/TagActionRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;TagActionRequest xmlns=&quot;urn:zimbraMail&quot;&gt;&#xd;
      &lt;action id=&quot;${TAG}&quot; op=&quot;delete&quot;/&gt;&#xd;
    &lt;/TagActionRequest&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${URL}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WaitSetRequest" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;soap:Header&gt;&#xd;
    &lt;context xmlns=&quot;urn:zimbra&quot;&gt;&#xd;
      &lt;authToken&gt;${AUTHTOKEN}&lt;/authToken&gt;&#xd;
      &lt;nosession/&gt;&#xd;
      &lt;userAgent name=&quot;jmeter-soap&quot;/&gt;&#xd;
    &lt;/context&gt;&#xd;
  &lt;/soap:Header&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;WaitSetRequest xmlns=&quot;urn:zimbraMail&quot; waitSet=&quot;${WAITSETID}&quot; seq=&quot;${WAITSETSEQ}&quot;/&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${URL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug_Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
