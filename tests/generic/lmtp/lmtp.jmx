<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${__P(jmetercsv,${__P(REQUEST.log)})}</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Accounts" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${__P(ACCOUNTS.csv)}</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">USER,PASS</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LMTP User" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(LOAD.loopcount)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(LOAD.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">$(__P(LOAD.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1497658914000</longProp>
        <longProp name="ThreadGroup.end_time">1497658914000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(LOAD.duration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(LOAD.delay)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="START" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
import com.zimbra.jmeter.Zimbra;
import com.zimbra.jmeter.Command;
//debug();
Zimbra lmtp = new Zimbra(props,&quot;LMTP&quot;);
ArrayList commands = lmtp.getcommands();

vars.putObject(&quot;COMMANDS&quot;,commands);
// generate command DELAY
if (props.get(&quot;LOAD.userduration&quot;) == null || commands.size() == 0) {
  vars.putObject(&quot;DELAY&quot;,&quot;0&quot;);
} else {
  int delay = Integer.parseInt(props.get(&quot;LOAD.userduration&quot;))*1000/commands.size();
  vars.putObject(&quot;DELAY&quot;,delay.toString());
}
// initialize CONTINUE
if (commands.size() &gt; 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;true&quot;);
} else {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}

//Create IMAP conncection and store for all future use
//log.info(&quot;This is the user: &quot;+vars.get(&quot;USER&quot;));
SMTPClient sc = new SMTPClient();
try {
  log.info(&quot;LMTP connection: &quot;+props.get(&quot;LMTP.server&quot;)+&quot; &quot;+props.get(&quot;LMTP.port&quot;));
  sc.connect(props.get(&quot;LMTP.server&quot;),Integer.parseInt(props.get(&quot;LMTP.port&quot;)));
  vars.putObject(&quot;LMTPCLIENT&quot;,sc);
} catch (Exception x) {
  log.info(&quot;connect error: &quot;,x);
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}

//log.info(Thread.currentThread().getName()+&quot; &quot;+ctx.getThreadNum().toString()+&quot; START&quot;);
log.info(Thread.currentThread().getName()+&quot; START&quot;);
//Capture IMAP response and include as sampler Response
SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Run_Commands" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Next_Command" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Command;

ArrayList commands = vars.getObject(&quot;COMMANDS&quot;);
if (commands.size() &gt; 0) {
  //log.info(&quot;Testing: &quot;+commands);
  Command c = commands.remove(0);
  vars.put(&quot;COMMAND&quot;,c.getName());
  for (Map.Entry a: c.argsSet()) {
  	vars.put(a.getKey(),a.getValue());
  }
  //log.info(vars.get(&quot;COMMAND&quot;));
}
if (commands.size() == 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Command_Execution" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Command Delay" enabled="true">
              <stringProp name="ConstantTimer.delay">${DELAY}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Commands" enabled="true">
              <stringProp name="SwitchController.value">${COMMAND}</stringProp>
            </SwitchController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(Thread.currentThread().getName()+&quot; &quot;+vars.get(&quot;COMMAND&quot;)+&quot; not currently supported&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LHLO" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;LMTPCLIENT&quot;);

try {
  sc.sendCommand(&quot;LHLO &quot;+InetAddress.getLocalHost().getHostName());
  log.info(Thread.currentThread().getName()+&quot; LHLO&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; LHLO: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="MAIL" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;LMTPCLIENT&quot;);

try {
  sc.mail(&quot;&lt;&quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;ZIMBRA.domain&quot;)+&quot;&gt;&quot;);
  log.info(Thread.currentThread().getName()+&quot; MAIL&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; MAIL: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RCPT" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;LMTPCLIENT&quot;);

try {
  sc.rcpt(&quot;&lt;&quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;ZIMBRA.domain&quot;)+&quot;&gt;&quot;);
  log.info(Thread.currentThread().getName()+&quot; RCPT&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; RCPT: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DATA" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
import java.io.FileReader;
SMTPClient sc = vars.getObject(&quot;LMTPCLIENT&quot;);

try {
  Writer w = sc.sendMessageData();
  // add canned From and To lines
  w.write(&quot;From: &quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;ZIMBRA.domain&quot;)+&quot;\r\n&quot;);
  w.write(&quot;To: &quot;+vars.get(&quot;USER&quot;)+&quot;@&quot;+props.get(&quot;ZIMBRA.domain&quot;)+&quot;\r\n&quot;);

  // read and send a files contents as message
  FileReader m = new FileReader(props.get(&quot;PROFILE.LMTP.message&quot;));
  BufferedReader b = new BufferedReader(m);
  String line = b.readLine();
  while(line != null) {
    w.write(line+&quot;\r\n&quot;);
    line = b.readLine();
  }
  w.close();
  sc.completePendingCommand();
  log.info(Thread.currentThread().getName()+&quot; DATA&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; DATA: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="QUIT" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;LMTPCLIENT&quot;);

try {
  sc.quit();
  log.info(Thread.currentThread().getName()+&quot; QUIT&quot;);
} catch (Exception e) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
  log.info(Thread.currentThread().getName()+&quot; QUIT: &quot;+e);
}

SampleResult.setResponseData(sc.getReplyString());
SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="END" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.net.smtp.SMTPClient;
SMTPClient sc = vars.getObject(&quot;LMTPCLIENT&quot;);

try {
  sc.disconnect();
  log.info(Thread.currentThread().getName()+&quot; END&quot;);
} catch (Exception e) {
  log.info(Thread.currentThread().getName()+&quot; END: &quot;+e);
}

//SampleResult.setResponseData(sc.getReplyString());
//SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug_Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
