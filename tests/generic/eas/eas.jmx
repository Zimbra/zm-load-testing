<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${__P(jmetercsv,${__P(REQUEST.log)})}</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Accounts" enabled="true">
        <stringProp name="filename">${__P(ACCOUNTS.csv)}</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">USER,PASS</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="EAS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(LOAD.EAS.loopcount)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(LOAD.EAS.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(LOAD.EAS.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1505165237000</longProp>
        <longProp name="ThreadGroup.end_time">1505165237000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(LOAD.duration)}</stringProp>
        <stringProp name="ThreadGroup.delay">${__P(LOAD.delay)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="START" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Zimbra;
import com.zimbra.jmeter.Command;

Zimbra eas = new Zimbra(props,&quot;EAS&quot;);
vars.putObject(&quot;EAS&quot;,eas);

String url = props.get(&quot;HTTP.protocol&quot;)+&quot;://&quot;+props.get(&quot;HTTP.server&quot;);
if (!props.get(&quot;HTTP.port&quot;).equals(&quot;&quot;) ) {
  url = url + &quot;:&quot; + props.get(&quot;HTTP.port&quot;); 
}
url = url+&quot;/Microsoft-Server-ActiveSync&quot;;
//log.info(&quot;EAS URL: &quot;+url);
vars.put(&quot;URL&quot;,url);

Zimbra eas = vars.getObject(&quot;EAS&quot;);
ArrayList commands = eas.getcommands();

vars.putObject(&quot;COMMANDS&quot;,commands);
// generate command DELAY
if (props.get(&quot;LOAD.EAS.userduration&quot;) == null || commands.size() == 0) {
  vars.putObject(&quot;DELAY&quot;,&quot;0&quot;);
} else {
  int delay = Integer.parseInt(props.get(&quot;LOAD.EAS.userduration&quot;))*1000/commands.size();
  vars.putObject(&quot;DELAY&quot;,delay.toString());
}
// initialize CONTINUE
if (commands.size() &gt; 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;true&quot;);
} else {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}
// initialize sync keys
vars.put(&quot;FOLDERSYNCKEY&quot;,&quot;0&quot;);
vars.put(&quot;SYNCSYNCKEY&quot;,&quot;0&quot;);
vars.put(&quot;FOLDERNAME&quot;, &quot;TestDir${__Random(1,10000)}&quot;);
vars.put(&quot;MOREAVAILABLE&quot;, &quot;true&quot;);
vars.put(&quot;DEVICEID&quot;, &quot;TestDevice${__Random(1,10000)}&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Run_Commands" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Next_Command" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.zimbra.jmeter.Command;

ArrayList commands = vars.getObject(&quot;COMMANDS&quot;);
if (commands.size() &gt; 0) {
  //log.info(&quot;Testing: &quot;+commands);
  Command c = commands.remove(0);
  vars.put(&quot;COMMAND&quot;,c.getName());
  for (Map.Entry a: c.argsSet()) {
  	vars.put(a.getKey(),a.getValue());
  }
  //log.info(vars.get(&quot;COMMAND&quot;));
}
if (commands.size() == 0) {
  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Command_Execution" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Command Delay" enabled="true">
              <stringProp name="ConstantTimer.delay">${DELAY}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Commands" enabled="true">
              <stringProp name="SwitchController.value">${COMMAND}</stringProp>
            </SwitchController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(Thread.currentThread().getName()+&quot; &quot;+vars.get(&quot;COMMAND&quot;)+&quot; not currently supported&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="FolderCreate" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.conn.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.util.EntityUtils;
import org.apache.commons.codec.binary.Base64;
import java.nio.charset.StandardCharsets;
import org.apache.http.HttpHeaders;
import com.zimbra.zimbrasync.wbxml.BinarySerializer;
import com.zimbra.zimbrasync.wbxml.BinaryParser;


try {
//Setup HTTP Request
HttpPost hp = new HttpPost(vars.get(&quot;URL&quot;)+&quot;?Cmd=&quot;+vars.get(&quot;COMMAND&quot;)+&quot;&amp;User=&quot;+vars.get(&quot;USER&quot;)+
                           &quot;&amp;DeviceId=&quot;+vars.get(&quot;DEVICEID&quot;)+&quot;&amp;DeviceType=jmeter&quot;);
String auth = vars.get(&quot;USER&quot;)+&quot;:&quot;+vars.get(&quot;PASS&quot;);
byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
String authHeader = &quot;Basic &quot;+new String(encodedAuth);
hp.setHeader(HttpHeaders.AUTHORIZATION,authHeader);
hp.setHeader(&quot;Content-Type&quot;,&quot;application/vnd.ms-sync.wbxml&quot;);
hp.setHeader(&quot;MS-ASProtocolVersion&quot;,props.getProperty(&quot;EAS.version&quot;,&quot;12.1&quot;));

//Generate WBXML Request Body
ByteArrayOutputStream bao = new ByteArrayOutputStream();
BinarySerializer bs = new BinarySerializer(bao,false);
bs.openTag(BinarySerializer.NAMESPACE_FOLDERHIERARCHY,BinarySerializer.FOLDERHIERARCHY_FOLDERCREATE);
bs.textElement(BinarySerializer.NAMESPACE_FOLDERHIERARCHY,BinarySerializer.FOLDERHIERARCHY_SYNCKEY,vars.get(&quot;FOLDERSYNCKEY&quot;));
bs.integerElement(BinarySerializer.NAMESPACE_FOLDERHIERARCHY,BinarySerializer.FOLDERHIERARCHY_PARENTID,0);
bs.textElement(BinarySerializer.NAMESPACE_FOLDERHIERARCHY,BinarySerializer.FOLDERHIERARCHY_DISPLAYNAME,vars.get(&quot;FOLDERNAME&quot;));
bs.integerElement(BinarySerializer.NAMESPACE_FOLDERHIERARCHY,BinarySerializer.FOLDERHIERARCHY_TYPE,12);
bs.closeTag();

//Add WBXML Body to request
HttpEntity entity = new ByteArrayEntity(bao.toByteArray());
hp.setEntity(entity);

//Disable SSL validation/verification
SSLContextBuilder builder = new SSLContextBuilder();
builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());
SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(builder.build(),SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

//Create http connection and send request
CloseableHttpClient dhc = HttpClients.custom().setSSLSocketFactory(sslsf).build();
HttpResponse hr = dhc.execute(hp);

//Process reponse for reporting results in jmeter
ResponseCode = hr.getStatusLine().getStatusCode();
ResponseMessage = hr.getStatusLine().getReasonPhrase();

//Convert WBXML to readable form for jmeter
String result=&quot;&quot;;
try {
  BinaryParser bp = new BinaryParser(new ByteArrayInputStream(EntityUtils.toByteArray(hr.getEntity())),false);
  while (bp.next() != null) {
    if (bp.getEventType() == BinaryParser.START_DOCUMENT) {
      result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
    } else if (bp.getEventType() == BinaryParser.END_DOCUMENT) {
      result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;; 	
    } else if (bp.getEventType() == BinaryParser.START_TAG) {
      result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;; 	
    } else if (bp.getEventType() == BinaryParser.END_TAG) {
      result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;; 	
    } else if (bp.getEventType() == BinaryParser.TEXT) {
      result+=bp.getText(); 	
    }
  }
} catch (IOException e) {
  if (e.getMessage().equals(&quot;Unexpected EOF&quot;)) {
  	// ignore
  } else {
  	throw e;
  }
}
SampleResult.setResponseData(result);

} catch (Exception e) {
	log.error(&quot;FolderCreate: &quot;+e.toString());
}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">${FOLDERSYNCKEY}</stringProp>
                  <stringProp name="XPathExtractor.refname">FOLDERSYNCKEY</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//SyncKey</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">FOLDERID</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//ServerId</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="FolderDelete" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.conn.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.util.EntityUtils;
import org.apache.commons.codec.binary.Base64;
import java.nio.charset.StandardCharsets;
import org.apache.http.HttpHeaders;
import com.zimbra.zimbrasync.wbxml.BinarySerializer;
import com.zimbra.zimbrasync.wbxml.BinaryParser;


try {
//Setup HTTP Request
HttpPost hp = new HttpPost(vars.get(&quot;URL&quot;)+&quot;?Cmd=&quot;+vars.get(&quot;COMMAND&quot;)+&quot;&amp;User=&quot;+vars.get(&quot;USER&quot;)+
                           &quot;&amp;DeviceId=&quot;+vars.get(&quot;DEVICEID&quot;)+&quot;&amp;DeviceType=jmeter&quot;);
String auth = vars.get(&quot;USER&quot;)+&quot;:&quot;+vars.get(&quot;PASS&quot;);
byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
String authHeader = &quot;Basic &quot;+new String(encodedAuth);
hp.setHeader(HttpHeaders.AUTHORIZATION,authHeader);
hp.setHeader(&quot;Content-Type&quot;,&quot;application/vnd.ms-sync.wbxml&quot;);
hp.setHeader(&quot;MS-ASProtocolVersion&quot;,props.getProperty(&quot;EAS.version&quot;,&quot;12.1&quot;));

//Generate WBXML Request Body
ByteArrayOutputStream bao = new ByteArrayOutputStream();
BinarySerializer bs = new BinarySerializer(bao,false);
bs.openTag(BinarySerializer.NAMESPACE_FOLDERHIERARCHY,BinarySerializer.FOLDERHIERARCHY_FOLDERDELETE);
bs.textElement(BinarySerializer.NAMESPACE_FOLDERHIERARCHY,BinarySerializer.FOLDERHIERARCHY_SYNCKEY,vars.get(&quot;FOLDERSYNCKEY&quot;));
bs.textElement(BinarySerializer.NAMESPACE_FOLDERHIERARCHY,BinarySerializer.FOLDERHIERARCHY_SERVERID,vars.get(&quot;FOLDERID&quot;));
bs.closeTag();

//Add WBXML Body to request
HttpEntity entity = new ByteArrayEntity(bao.toByteArray());
hp.setEntity(entity);

//Disable SSL validation/verification
SSLContextBuilder builder = new SSLContextBuilder();
builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());
SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(builder.build(),SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

//Create http connection and send request
CloseableHttpClient dhc = HttpClients.custom().setSSLSocketFactory(sslsf).build();
HttpResponse hr = dhc.execute(hp);

//Process reponse for reporting results in jmeter
ResponseCode = hr.getStatusLine().getStatusCode();
ResponseMessage = hr.getStatusLine().getReasonPhrase();

//Convert WBXML to readable form for jmeter
String result=&quot;&quot;;
try {
  BinaryParser bp = new BinaryParser(new ByteArrayInputStream(EntityUtils.toByteArray(hr.getEntity())),false);
  while (bp.next() != null) {
    if (bp.getEventType() == BinaryParser.START_DOCUMENT) {
      result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
    } else if (bp.getEventType() == BinaryParser.END_DOCUMENT) {
      result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;; 	
    } else if (bp.getEventType() == BinaryParser.START_TAG) {
      result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;; 	
    } else if (bp.getEventType() == BinaryParser.END_TAG) {
      result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;; 	
    } else if (bp.getEventType() == BinaryParser.TEXT) {
      result+=bp.getText(); 	
    }
  }
} catch (IOException e) {
  if (e.message.equals(&quot;Unexpected EOF&quot;)) {
  	// ignore
  } else {
  	throw e;
  }
}
SampleResult.setResponseData(result);

} catch (Exception e) {
	log.error(&quot;FolderDelete: &quot;+e.toString());
}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">${FOLDERSYNCKEY}</stringProp>
                  <stringProp name="XPathExtractor.refname">FOLDERSYNCKEY</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//SyncKey</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="FolderSync" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.conn.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.util.EntityUtils;
import org.apache.commons.codec.binary.Base64;
import java.nio.charset.StandardCharsets;
import org.apache.http.HttpHeaders;
import com.zimbra.zimbrasync.wbxml.BinarySerializer;
import com.zimbra.zimbrasync.wbxml.BinaryParser;


try {
//Setup HTTP Request
HttpPost hp = new HttpPost(vars.get(&quot;URL&quot;)+&quot;?Cmd=&quot;+vars.get(&quot;COMMAND&quot;)+&quot;&amp;User=&quot;+vars.get(&quot;USER&quot;)+
                           &quot;&amp;DeviceId=&quot;+vars.get(&quot;DEVICEID&quot;)+&quot;&amp;DeviceType=jmeter&quot;);
String auth = vars.get(&quot;USER&quot;)+&quot;:&quot;+vars.get(&quot;PASS&quot;);
byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
String authHeader = &quot;Basic &quot;+new String(encodedAuth);
hp.setHeader(HttpHeaders.AUTHORIZATION,authHeader);
hp.setHeader(&quot;Content-Type&quot;,&quot;application/vnd.ms-sync.wbxml&quot;);
hp.setHeader(&quot;MS-ASProtocolVersion&quot;,props.getProperty(&quot;EAS.version&quot;,&quot;12.1&quot;));

//Generate WBXML Request Body
ByteArrayOutputStream bao = new ByteArrayOutputStream();
BinarySerializer bs = new BinarySerializer(bao,false);
bs.openTag(BinarySerializer.NAMESPACE_FOLDERHIERARCHY,BinarySerializer.FOLDERHIERARCHY_FOLDERSYNC);
bs.textElement(BinarySerializer.NAMESPACE_FOLDERHIERARCHY,BinarySerializer.FOLDERHIERARCHY_SYNCKEY,vars.get(&quot;FOLDERSYNCKEY&quot;));
bs.closeTag();

//Add WBXML Body to request
HttpEntity entity = new ByteArrayEntity(bao.toByteArray());
hp.setEntity(entity);

//Disable SSL validation/verification
SSLContextBuilder builder = new SSLContextBuilder();
builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());
SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(builder.build(),SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

//Create http connection and send request
CloseableHttpClient dhc = HttpClients.custom().setSSLSocketFactory(sslsf).build();
HttpResponse hr = dhc.execute(hp);

//Process reponse for reporting results in jmeter
ResponseCode = hr.getStatusLine().getStatusCode();
ResponseMessage = hr.getStatusLine().getReasonPhrase();

//Convert WBXML to readable form for jmeter
String result=&quot;&quot;;
try {
  BinaryParser bp = new BinaryParser(new ByteArrayInputStream(EntityUtils.toByteArray(hr.getEntity())),false);
  while (bp.next() != null) {
    if (bp.getEventType() == BinaryParser.START_DOCUMENT) {
      result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
    } else if (bp.getEventType() == BinaryParser.END_DOCUMENT) {
      result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;; 	
    } else if (bp.getEventType() == BinaryParser.START_TAG) {
      result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;; 	
    } else if (bp.getEventType() == BinaryParser.END_TAG) {
      result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;; 	
    } else if (bp.getEventType() == BinaryParser.TEXT) {
      result+=bp.getText(); 	
    }
  }
} catch (IOException e) {
  if (e.message.equals(&quot;Unexpected EOF&quot;)) {
  	// ignore
  } else {
  	throw e;
  }
}
SampleResult.setResponseData(result);

} catch (Exception e) {
	log.error(&quot;FolderSync: &quot;+e.toString());
}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">${FOLDERSYNCKEY}</stringProp>
                  <stringProp name="XPathExtractor.refname">FOLDERSYNCKEY</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//SyncKey</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Search" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.conn.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.util.EntityUtils;
import org.apache.commons.codec.binary.Base64;
import java.nio.charset.StandardCharsets;
import org.apache.http.HttpHeaders;
import com.zimbra.zimbrasync.wbxml.BinarySerializer;
import com.zimbra.zimbrasync.wbxml.BinaryParser;


try {
//Setup HTTP Request
HttpPost hp = new HttpPost(vars.get(&quot;URL&quot;)+&quot;?Cmd=&quot;+vars.get(&quot;COMMAND&quot;)+&quot;&amp;User=&quot;+vars.get(&quot;USER&quot;)+
                           &quot;&amp;DeviceId=&quot;+vars.get(&quot;DEVICEID&quot;)+&quot;&amp;DeviceType=jmeter&quot;);
String auth = vars.get(&quot;USER&quot;)+&quot;:&quot;+vars.get(&quot;PASS&quot;);
byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
String authHeader = &quot;Basic &quot;+new String(encodedAuth);
hp.setHeader(HttpHeaders.AUTHORIZATION,authHeader);
hp.setHeader(&quot;Content-Type&quot;,&quot;application/vnd.ms-sync.wbxml&quot;);
hp.setHeader(&quot;MS-ASProtocolVersion&quot;,props.getProperty(&quot;EAS.version&quot;,&quot;12.1&quot;));

//Generate WBXML Request Body
ByteArrayOutputStream bao = new ByteArrayOutputStream();
BinarySerializer bs = new BinarySerializer(bao,false);
bs.openTag(BinarySerializer.NAMESPACE_SEARCH,BinarySerializer.SEARCH_SEARCH);
bs.openTag(BinarySerializer.NAMESPACE_SEARCH,BinarySerializer.SEARCH_STORE);
bs.textElement(BinarySerializer.NAMESPACE_SEARCH,BinarySerializer.SEARCH_NAME,&quot;Mailbox&quot;);
bs.openTag(BinarySerializer.NAMESPACE_SEARCH,BinarySerializer.SEARCH_QUERY);
bs.openTag(BinarySerializer.NAMESPACE_SEARCH,BinarySerializer.SEARCH_AND);
bs.textElement(BinarySerializer.NAMESPACE_SEARCH,BinarySerializer.SEARCH_FREETEXT,&quot;test&quot;);
bs.closeTag();
bs.closeTag();
bs.openTag(BinarySerializer.NAMESPACE_SEARCH,BinarySerializer.SEARCH_OPTIONS);
bs.textElement(BinarySerializer.NAMESPACE_SEARCH,BinarySerializer.SEARCH_RANGE,&quot;0-9&quot;);
bs.closeTag();
bs.closeTag();
bs.closeTag();

//Add WBXML Body to request
HttpEntity entity = new ByteArrayEntity(bao.toByteArray());
hp.setEntity(entity);

//Disable SSL validation/verification
SSLContextBuilder builder = new SSLContextBuilder();
builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());
SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(builder.build(),SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

//Create http connection and send request
CloseableHttpClient dhc = HttpClients.custom().setSSLSocketFactory(sslsf).build();
HttpResponse hr = dhc.execute(hp);

//Process reponse for reporting results in jmeter
ResponseCode = hr.getStatusLine().getStatusCode();
ResponseMessage = hr.getStatusLine().getReasonPhrase();

//Convert WBXML to readable form for jmeter
String result=&quot;&quot;;
try {
  BinaryParser bp = new BinaryParser(new ByteArrayInputStream(EntityUtils.toByteArray(hr.getEntity())),false);
  while (bp.next() != null) {
    if (bp.getEventType() == BinaryParser.START_DOCUMENT) {
      result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
    } else if (bp.getEventType() == BinaryParser.END_DOCUMENT) {
      result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;; 	
    } else if (bp.getEventType() == BinaryParser.START_TAG) {
      result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;; 	
    } else if (bp.getEventType() == BinaryParser.END_TAG) {
      result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;; 	
    } else if (bp.getEventType() == BinaryParser.TEXT) {
      result+=bp.getText(); 	
    }
  }
} catch (IOException e) {
  if (e.message.equals(&quot;Unexpected EOF&quot;)) {
  	// ignore
  } else {
  	throw e;
  }
}
SampleResult.setResponseData(result);

} catch (Exception e) {
	log.error(&quot;Search:&quot;+e.toString());
}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="SendMail" enabled="true">
                <stringProp name="SwitchController.value">${__P(EAS.version,12.1)}</stringProp>
              </SwitchController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
                  <stringProp name="BeanShellSampler.query">import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;
import org.apache.http.entity.StringEntity;
import org.apache.http.conn.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.util.EntityUtils;
import org.apache.commons.codec.binary.Base64;
import java.nio.charset.StandardCharsets;
import org.apache.http.HttpHeaders;
import com.zimbra.zimbrasync.wbxml.BinarySerializer;
import com.zimbra.zimbrasync.wbxml.BinaryParser;

String message = &quot;From: &lt;&quot;+vars.get(&quot;USER&quot;)+&quot;&gt;\n&quot;;
message += &quot;To: &lt;&quot;+vars.get(&quot;USER&quot;)+&quot;&gt;\n&quot;;
message += &quot;Subject: From Active Sync\n&quot;;
message += &quot;MIME-Version: 1.0\n&quot;;
message += &quot;Content-Type:  text/plain; charset=utf-8\n&quot;;
message += &quot;Content-Transfer-Encoding: 7bit\n\n&quot;;
message += &quot;This is the test message.\n&quot;;

try {
//Setup HTTP Request
HttpPost hp = new HttpPost(vars.get(&quot;URL&quot;)+&quot;?Cmd=&quot;+vars.get(&quot;COMMAND&quot;)+&quot;&amp;User=&quot;+vars.get(&quot;USER&quot;)+
                           &quot;&amp;DeviceId=testing&amp;DeviceType=jmeter&quot;);
String auth = vars.get(&quot;USER&quot;)+&quot;:&quot;+vars.get(&quot;PASS&quot;);
byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
String authHeader = &quot;Basic &quot;+new String(encodedAuth);
hp.setHeader(HttpHeaders.AUTHORIZATION,authHeader);
hp.setHeader(&quot;Content-Type&quot;,&quot;message/rfc822&quot;);
hp.setHeader(&quot;MS-ASProtocolVersion&quot;,props.getProperty(&quot;EAS.version&quot;,&quot;12.1&quot;));

HttpEntity entity = new StringEntity(message);
hp.setEntity(entity);

SSLContextBuilder builder = new SSLContextBuilder();
builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());
SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(builder.build(),SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

CloseableHttpClient dhc = HttpClients.custom().setSSLSocketFactory(sslsf).build();
HttpResponse hr = dhc.execute(hp);

//Process reponse for reporting results in jmeter
ResponseCode = hr.getStatusLine().getStatusCode();
ResponseMessage = hr.getStatusLine().getReasonPhrase();

//Convert WBXML to readable form for jmeter
if (hr.getEntity().getContentLength() &gt; 0) {
  String result=&quot;&quot;;
  try {
    BinaryParser bp = new BinaryParser(new ByteArrayInputStream(EntityUtils.toByteArray(hr.getEntity())),false);
    while (bp.next() != null) {
      if (bp.getEventType() == BinaryParser.START_DOCUMENT) {
        result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.END_DOCUMENT) {
        result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;; 	
      } else if (bp.getEventType() == BinaryParser.START_TAG) {
        result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;; 	
      } else if (bp.getEventType() == BinaryParser.END_TAG) {
        result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;; 	
      } else if (bp.getEventType() == BinaryParser.TEXT) {
        result+=bp.getText(); 	
      }
    }
  } catch (Exception e) {
    if (e.getMessage().equals(&quot;Unexpected EOF&quot;)) {
      // ignore
    } else {
      throw e;
    }
  }
  SampleResult.setResponseData(result);
}
} catch (Exception e) {
	log.error(&quot;SendMail exception: &quot;+e.toString());
}</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="14.0" enabled="true">
                  <stringProp name="BeanShellSampler.query">import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.conn.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.util.EntityUtils;
import org.apache.commons.codec.binary.Base64;
import java.nio.charset.StandardCharsets;
import org.apache.http.HttpHeaders;
import com.zimbra.zimbrasync.wbxml.BinarySerializer;
import com.zimbra.zimbrasync.wbxml.BinaryParser;

String message = &quot;From: &lt;&quot;+vars.get(&quot;USER&quot;)+&quot;&gt;\n&quot;;
message += &quot;To: &lt;&quot;+vars.get(&quot;USER&quot;)+&quot;&gt;\n&quot;;
message += &quot;Subject: From Active Sync\n&quot;;
message += &quot;MIME-Version: 1.0\n&quot;;
message += &quot;Content-Type:  text/plain; charset=utf-8\n&quot;;
message += &quot;Content-Transfer-Encoding: 7bit\n\n&quot;;
message += &quot;This is the test message.\n&quot;;

try {
//Setup HTTP Request
HttpPost hp = new HttpPost(vars.get(&quot;URL&quot;)+&quot;?Cmd=&quot;+vars.get(&quot;COMMAND&quot;)+&quot;&amp;User=&quot;+vars.get(&quot;USER&quot;)+
                           &quot;&amp;DeviceId=testing&amp;DeviceType=jmeter&quot;);
String auth = vars.get(&quot;USER&quot;)+&quot;:&quot;+vars.get(&quot;PASS&quot;);
byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
String authHeader = &quot;Basic &quot;+new String(encodedAuth);
hp.setHeader(HttpHeaders.AUTHORIZATION,authHeader);
hp.setHeader(&quot;Content-Type&quot;,&quot;application/vnd.ms-sync.wbxml&quot;);
hp.setHeader(&quot;MS-ASProtocolVersion&quot;,props.getProperty(&quot;EAS.version&quot;,&quot;12.1&quot;));

//Generate WBXML Request Body
ByteArrayOutputStream bao = new ByteArrayOutputStream();
BinarySerializer bs = new BinarySerializer(bao,false);
bs.openTag(BinarySerializer.NAMESPACE_COMPOSEMAIL,BinarySerializer.COMPOSEMAIL_SENDMAIL);
bs.textElement(BinarySerializer.NAMESPACE_COMPOSEMAIL,BinarySerializer.COMPOSEMAIL_CLIENTID,UUID.randomUUID().toString());
bs.opaqueElement(BinarySerializer.NAMESPACE_COMPOSEMAIL,BinarySerializer.COMPOSEMAIL_MIME,message);
bs.closeTag();

HttpEntity entity = new ByteArrayEntity(bao.toByteArray());
hp.setEntity(entity);

SSLContextBuilder builder = new SSLContextBuilder();
builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());
SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(builder.build(),SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

CloseableHttpClient dhc = HttpClients.custom().setSSLSocketFactory(sslsf).build();
HttpResponse hr = dhc.execute(hp);

//Process reponse for reporting results in jmeter
ResponseCode = hr.getStatusLine().getStatusCode();
ResponseMessage = hr.getStatusLine().getReasonPhrase();

//Convert WBXML to readable form for jmeter
if (hr.getEntity().getContentLength() &gt; 0) {
  String result=&quot;&quot;;
  try {
    BinaryParser bp = new BinaryParser(new ByteArrayInputStream(EntityUtils.toByteArray(hr.getEntity())),false);
    while (bp.next() != null) {
      if (bp.getEventType() == BinaryParser.START_DOCUMENT) {
        result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.END_DOCUMENT) {
        result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.START_TAG) {
        result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.END_TAG) {
        result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.TEXT) {
        result+=bp.getText();
      }
    }
  } catch (Exception e) {
    if (e.getMessage().equals(&quot;Unexpected EOF&quot;)) {
      // ignore
    } else {
      throw e;
    }
  }
  SampleResult.setResponseData(result);
}
} catch (Exception e) {
	log.error(&quot;SendMail exception: &quot;+e.toString());
}</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="14.1" enabled="true">
                  <stringProp name="BeanShellSampler.query">import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.conn.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.util.EntityUtils;
import org.apache.commons.codec.binary.Base64;
import java.nio.charset.StandardCharsets;
import org.apache.http.HttpHeaders;
import com.zimbra.zimbrasync.wbxml.BinarySerializer;
import com.zimbra.zimbrasync.wbxml.BinaryParser;

String message = &quot;From: &lt;&quot;+vars.get(&quot;USER&quot;)+&quot;&gt;\n&quot;;
message += &quot;To: &lt;&quot;+vars.get(&quot;USER&quot;)+&quot;&gt;\n&quot;;
message += &quot;Subject: From Active Sync\n&quot;;
message += &quot;MIME-Version: 1.0\n&quot;;
message += &quot;Content-Type:  text/plain; charset=utf-8\n&quot;;
message += &quot;Content-Transfer-Encoding: 7bit\n\n&quot;;
message += &quot;This is the test message.\n&quot;;

try {
//Setup HTTP Request
HttpPost hp = new HttpPost(vars.get(&quot;URL&quot;)+&quot;?Cmd=&quot;+vars.get(&quot;COMMAND&quot;)+&quot;&amp;User=&quot;+vars.get(&quot;USER&quot;)+
                           &quot;&amp;DeviceId=testing&amp;DeviceType=jmeter&quot;);
String auth = vars.get(&quot;USER&quot;)+&quot;:&quot;+vars.get(&quot;PASS&quot;);
byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
String authHeader = &quot;Basic &quot;+new String(encodedAuth);
hp.setHeader(HttpHeaders.AUTHORIZATION,authHeader);
hp.setHeader(&quot;Content-Type&quot;,&quot;application/vnd.ms-sync.wbxml&quot;);
hp.setHeader(&quot;MS-ASProtocolVersion&quot;,props.getProperty(&quot;EAS.version&quot;,&quot;12.1&quot;));

//Generate WBXML Request Body
ByteArrayOutputStream bao = new ByteArrayOutputStream();
BinarySerializer bs = new BinarySerializer(bao,false);
bs.openTag(BinarySerializer.NAMESPACE_COMPOSEMAIL,BinarySerializer.COMPOSEMAIL_SENDMAIL);
bs.textElement(BinarySerializer.NAMESPACE_COMPOSEMAIL,BinarySerializer.COMPOSEMAIL_CLIENTID,UUID.randomUUID().toString());
bs.opaqueElement(BinarySerializer.NAMESPACE_COMPOSEMAIL,BinarySerializer.COMPOSEMAIL_SAVEINSENTITEMS);
bs.opaqueElement(BinarySerializer.NAMESPACE_COMPOSEMAIL,BinarySerializer.COMPOSEMAIL_MIME,message);
bs.closeTag();

HttpEntity entity = new ByteArrayEntity(bao.toByteArray());
hp.setEntity(entity);

SSLContextBuilder builder = new SSLContextBuilder();
builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());
SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(builder.build(),SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

CloseableHttpClient dhc = HttpClients.custom().setSSLSocketFactory(sslsf).build();
HttpResponse hr = dhc.execute(hp);

//Process reponse for reporting results in jmeter
ResponseCode = hr.getStatusLine().getStatusCode();
ResponseMessage = hr.getStatusLine().getReasonPhrase();

//Convert WBXML to readable form for jmeter
if (hr.getEntity().getContentLength() &gt; 0) {
  String result=&quot;&quot;;
  try {
    BinaryParser bp = new BinaryParser(new ByteArrayInputStream(EntityUtils.toByteArray(hr.getEntity())),false);
    while (bp.next() != null) {
      if (bp.getEventType() == BinaryParser.START_DOCUMENT) {
        result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.END_DOCUMENT) {
        result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.START_TAG) {
        result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.END_TAG) {
        result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.TEXT) {
        result+=bp.getText();
      }
    }
  } catch (Exception e) {
    if (e.getMessage().equals(&quot;Unexpected EOF&quot;)) {
      // ignore
    } else {
      throw e;
    }
  }
  SampleResult.setResponseData(result);
}
} catch (Exception e) {
	log.error(&quot;SendMail exception: &quot;+e.toString());
}</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="16.0" enabled="true">
                  <stringProp name="BeanShellSampler.query">import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.conn.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.util.EntityUtils;
import org.apache.commons.codec.binary.Base64;
import java.nio.charset.StandardCharsets;
import org.apache.http.HttpHeaders;
import com.zimbra.zimbrasync.wbxml.BinarySerializer;
import com.zimbra.zimbrasync.wbxml.BinaryParser;

String message = &quot;From: &lt;&quot;+vars.get(&quot;USER&quot;)+&quot;&gt;\n&quot;;
message += &quot;To: &lt;&quot;+vars.get(&quot;USER&quot;)+&quot;&gt;\n&quot;;
message += &quot;Subject: From Active Sync\n&quot;;
message += &quot;MIME-Version: 1.0\n&quot;;
message += &quot;Content-Type:  text/plain; charset=utf-8\n&quot;;
message += &quot;Content-Transfer-Encoding: 7bit\n\n&quot;;
message += &quot;This is the test message.\n&quot;;

try {
//Setup HTTP Request
HttpPost hp = new HttpPost(vars.get(&quot;URL&quot;)+&quot;?Cmd=&quot;+vars.get(&quot;COMMAND&quot;)+&quot;&amp;User=&quot;+vars.get(&quot;USER&quot;)+
                           &quot;&amp;DeviceId=&quot;+vars.get(&quot;DEVICEID&quot;)+&quot;&amp;DeviceType=jmeter&quot;);
String auth = vars.get(&quot;USER&quot;)+&quot;:&quot;+vars.get(&quot;PASS&quot;);
byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
String authHeader = &quot;Basic &quot;+new String(encodedAuth);
hp.setHeader(HttpHeaders.AUTHORIZATION,authHeader);
hp.setHeader(&quot;Content-Type&quot;,&quot;application/vnd.ms-sync.wbxml&quot;);
hp.setHeader(&quot;MS-ASProtocolVersion&quot;,props.getProperty(&quot;EAS.version&quot;,&quot;12.1&quot;));

//Generate WBXML Request Body
ByteArrayOutputStream bao = new ByteArrayOutputStream();
BinarySerializer bs = new BinarySerializer(bao,false);
bs.openTag(BinarySerializer.NAMESPACE_COMPOSEMAIL,BinarySerializer.COMPOSEMAIL_SENDMAIL);
bs.textElement(BinarySerializer.NAMESPACE_COMPOSEMAIL,BinarySerializer.COMPOSEMAIL_CLIENTID,UUID.randomUUID().toString());
bs.opaqueElement(BinarySerializer.NAMESPACE_COMPOSEMAIL,BinarySerializer.COMPOSEMAIL_MIME,message);
bs.closeTag();

HttpEntity entity = new ByteArrayEntity(bao.toByteArray());
hp.setEntity(entity);

SSLContextBuilder builder = new SSLContextBuilder();
builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());
SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(builder.build(),SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

CloseableHttpClient dhc = HttpClients.custom().setSSLSocketFactory(sslsf).build();
HttpResponse hr = dhc.execute(hp);

//Process reponse for reporting results in jmeter
ResponseCode = hr.getStatusLine().getStatusCode();
ResponseMessage = hr.getStatusLine().getReasonPhrase();

//Convert WBXML to readable form for jmeter
if (hr.getEntity().getContentLength() &gt; 0) {
  String result=&quot;&quot;;
  try {
    BinaryParser bp = new BinaryParser(new ByteArrayInputStream(EntityUtils.toByteArray(hr.getEntity())),false);
    while (bp.next() != null) {
      if (bp.getEventType() == BinaryParser.START_DOCUMENT) {
        result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.END_DOCUMENT) {
        result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.START_TAG) {
        result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.END_TAG) {
        result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.TEXT) {
        result+=bp.getText();
      }
    }
  } catch (Exception e) {
    if (e.getMessage().equals(&quot;Unexpected EOF&quot;)) {
      // ignore
    } else {
      throw e;
    }
  }
  SampleResult.setResponseData(result);
}
} catch (Exception e) {
	log.error(&quot;SendMail exception: &quot;+e.toString());
}</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="16.1" enabled="true">
                  <stringProp name="BeanShellSampler.query">import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.conn.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.util.EntityUtils;
import org.apache.commons.codec.binary.Base64;
import java.nio.charset.StandardCharsets;
import org.apache.http.HttpHeaders;
import com.zimbra.zimbrasync.wbxml.BinarySerializer;
import com.zimbra.zimbrasync.wbxml.BinaryParser;

String message = &quot;From: &lt;&quot;+vars.get(&quot;USER&quot;)+&quot;&gt;\n&quot;;
message += &quot;To: &lt;&quot;+vars.get(&quot;USER&quot;)+&quot;&gt;\n&quot;;
message += &quot;Subject: From Active Sync\n&quot;;
message += &quot;MIME-Version: 1.0\n&quot;;
message += &quot;Content-Type:  text/plain; charset=utf-8\n&quot;;
message += &quot;Content-Transfer-Encoding: 7bit\n\n&quot;;
message += &quot;This is the test message.\n&quot;;

try {
//Setup HTTP Request
HttpPost hp = new HttpPost(vars.get(&quot;URL&quot;)+&quot;?Cmd=&quot;+vars.get(&quot;COMMAND&quot;)+&quot;&amp;User=&quot;+vars.get(&quot;USER&quot;)+
                           &quot;&amp;DeviceId=&quot;+vars.get(&quot;DEVICEID&quot;)+&quot;&amp;DeviceType=jmeter&quot;);
String auth = vars.get(&quot;USER&quot;)+&quot;:&quot;+vars.get(&quot;PASS&quot;);
byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
String authHeader = &quot;Basic &quot;+new String(encodedAuth);
hp.setHeader(HttpHeaders.AUTHORIZATION,authHeader);
hp.setHeader(&quot;Content-Type&quot;,&quot;application/vnd.ms-sync.wbxml&quot;);
hp.setHeader(&quot;MS-ASProtocolVersion&quot;,props.getProperty(&quot;EAS.version&quot;,&quot;12.1&quot;));

//Generate WBXML Request Body
ByteArrayOutputStream bao = new ByteArrayOutputStream();
BinarySerializer bs = new BinarySerializer(bao,false);
bs.openTag(BinarySerializer.NAMESPACE_COMPOSEMAIL,BinarySerializer.COMPOSEMAIL_SENDMAIL);
bs.textElement(BinarySerializer.NAMESPACE_COMPOSEMAIL,BinarySerializer.COMPOSEMAIL_CLIENTID,UUID.randomUUID().toString());
bs.opaqueElement(BinarySerializer.NAMESPACE_COMPOSEMAIL,BinarySerializer.COMPOSEMAIL_MIME,message);
bs.closeTag();

HttpEntity entity = new ByteArrayEntity(bao.toByteArray());
hp.setEntity(entity);

SSLContextBuilder builder = new SSLContextBuilder();
builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());
SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(builder.build(),SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

CloseableHttpClient dhc = HttpClients.custom().setSSLSocketFactory(sslsf).build();
HttpResponse hr = dhc.execute(hp);

//Process reponse for reporting results in jmeter
ResponseCode = hr.getStatusLine().getStatusCode();
ResponseMessage = hr.getStatusLine().getReasonPhrase();

//Convert WBXML to readable form for jmeter
if (hr.getEntity().getContentLength() &gt; 0) {
  String result=&quot;&quot;;
  try {
    BinaryParser bp = new BinaryParser(new ByteArrayInputStream(EntityUtils.toByteArray(hr.getEntity())),false);
    while (bp.next() != null) {
      if (bp.getEventType() == BinaryParser.START_DOCUMENT) {
        result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.END_DOCUMENT) {
        result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.START_TAG) {
        result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.END_TAG) {
        result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;;
      } else if (bp.getEventType() == BinaryParser.TEXT) {
        result+=bp.getText();
      }
    }
  } catch (Exception e) {
    if (e.getMessage().equals(&quot;Unexpected EOF&quot;)) {
      // ignore
    } else {
      throw e;
    }
  }
  SampleResult.setResponseData(result);
}
} catch (Exception e) {
	log.error(&quot;SendMail exception: &quot;+e.toString());
}</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="DeltaSync" enabled="true">
                <stringProp name="WhileController.condition">${__BeanShell(&quot;${MOREAVAILABLE}&quot;.equals(&quot;true&quot;))}</stringProp>
              </WhileController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
                  <stringProp name="TestPlan.comments">					</stringProp>
                  <stringProp name="BeanShellSampler.query">import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.conn.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.util.EntityUtils;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang3.StringEscapeUtils;
import java.nio.charset.StandardCharsets;
import org.apache.http.HttpHeaders;
import com.zimbra.zimbrasync.wbxml.BinarySerializer;
import com.zimbra.zimbrasync.wbxml.BinaryParser;

import org.apache.http.Header;

try {
//Setup HTTP Request
HttpPost hp = new HttpPost(vars.get(&quot;URL&quot;)+&quot;?Cmd=Sync&amp;User=&quot;+vars.get(&quot;USER&quot;)+ &quot;&amp;DeviceId=&quot;+vars.get(&quot;DEVICEID&quot;)+&quot;&amp;DeviceType=jmeter&quot;);
String auth = vars.get(&quot;USER&quot;)+&quot;:&quot;+vars.get(&quot;PASS&quot;);
byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
String authHeader = &quot;Basic &quot;+new String(encodedAuth);
hp.setHeader(HttpHeaders.AUTHORIZATION,authHeader);
hp.setHeader(&quot;Content-Type&quot;,&quot;application/vnd.ms-sync.wbxml&quot;);
hp.setHeader(&quot;MS-ASProtocolVersion&quot;,props.getProperty(&quot;EAS.version&quot;,&quot;12.1&quot;));

//Generate WBXML Request Body
ByteArrayOutputStream bao = new ByteArrayOutputStream();
BinarySerializer bs = new BinarySerializer(bao,false);
bs.openTag(BinarySerializer.NAMESPACE_AIRSYNC,BinarySerializer.AIRSYNC_SYNC);
bs.openTag(BinarySerializer.NAMESPACE_AIRSYNC,BinarySerializer.AIRSYNC_COLLECTIONS);
bs.openTag(BinarySerializer.NAMESPACE_AIRSYNC,BinarySerializer.AIRSYNC_COLLECTION);
bs.textElement(BinarySerializer.NAMESPACE_AIRSYNC,BinarySerializer.AIRSYNC_SYNCKEY,vars.get(&quot;SYNCSYNCKEY&quot;));
bs.integerElement(BinarySerializer.NAMESPACE_AIRSYNC,BinarySerializer.AIRSYNC_COLLECTIONID,2);
bs.closeTag();
bs.closeTag();
bs.closeTag();

//Add WBXML Body to request
HttpEntity entity = new ByteArrayEntity(bao.toByteArray());
hp.setEntity(entity);

//Disable SSL validation/verification
SSLContextBuilder builder = new SSLContextBuilder();
builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());
SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(builder.build(),SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

//Create http connection and send request
CloseableHttpClient dhc = HttpClients.custom().setSSLSocketFactory(sslsf).build();
HttpResponse hr = dhc.execute(hp);

//Process reponse for reporting results in jmeter
ResponseCode = hr.getStatusLine().getStatusCode();
ResponseMessage = hr.getStatusLine().getReasonPhrase();

//View headers for debug
//for (Header h : hr.getAllHeaders()) {
//  log.info(&quot;Header: &quot;+h.getName()+&quot;=&quot;+h.getValue());
//}

//Convert WBXML to readable form for jmeter
String result=&quot;&quot;;
try {
  BinaryParser bp = new BinaryParser(new ByteArrayInputStream(EntityUtils.toByteArray(hr.getEntity())),false);
  while (bp.next() != null) {
    if (bp.getEventType() == BinaryParser.START_DOCUMENT) {
      result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
    } else if (bp.getEventType() == BinaryParser.END_DOCUMENT) {
      result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;;
    } else if (bp.getEventType() == BinaryParser.START_TAG) {
      result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
    } else if (bp.getEventType() == BinaryParser.END_TAG) {
      result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;;
    } else if (bp.getEventType() == BinaryParser.TEXT) {
    	 // ugly quick fix to resolve invalid XML characters
    	 String text = bp.getText();
      text=text.replaceAll(&quot;\\p{Cntrl}&quot;,&quot;&quot;);
      result+=StringEscapeUtils.escapeXml(text);
    }
  }
} catch (IOException e) {
  if (e.message.equals(&quot;Unexpected EOF&quot;)) {
  	// ignore
  } else {
  	throw e;
  }
}
SampleResult.setResponseData(result);
//log.info(&quot;========&quot; +result);

} catch (Exception e) {
	log.error(&quot;Sync:&quot;+e.toString());
}</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                    <stringProp name="XPathExtractor.default">${SYNCSYNCKEY}</stringProp>
                    <stringProp name="XPathExtractor.refname">SYNCSYNCKEY</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">//SyncKey</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">false</boolProp>
                    <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  </XPathExtractor>
                  <hashTree/>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                    <stringProp name="XPathExtractor.default"></stringProp>
                    <stringProp name="XPathExtractor.refname">MOREAVAILABLE</stringProp>
                    <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">boolean(//MoreAvailable)</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">false</boolProp>
                  </XPathExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="InitialSync" enabled="true">
                <stringProp name="TestPlan.comments">					</stringProp>
                <stringProp name="BeanShellSampler.query">import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.conn.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.util.EntityUtils;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang3.StringEscapeUtils;
import java.nio.charset.StandardCharsets;
import org.apache.http.HttpHeaders;
import com.zimbra.zimbrasync.wbxml.BinarySerializer;
import com.zimbra.zimbrasync.wbxml.BinaryParser;

import org.apache.http.Header;

try {
//Setup HTTP Request
HttpPost hp = new HttpPost(vars.get(&quot;URL&quot;)+&quot;?Cmd=Sync&amp;User=&quot;+vars.get(&quot;USER&quot;)+&quot;&amp;DeviceId=&quot;+vars.get(&quot;DEVICEID&quot;)+&quot;&amp;DeviceType=jmeter&quot;);
String auth = vars.get(&quot;USER&quot;)+&quot;:&quot;+vars.get(&quot;PASS&quot;);
byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
String authHeader = &quot;Basic &quot;+new String(encodedAuth);
hp.setHeader(HttpHeaders.AUTHORIZATION,authHeader);
hp.setHeader(&quot;Content-Type&quot;,&quot;application/vnd.ms-sync.wbxml&quot;);
hp.setHeader(&quot;MS-ASProtocolVersion&quot;,props.getProperty(&quot;EAS.version&quot;,&quot;12.1&quot;));

//Generate WBXML Request Body
ByteArrayOutputStream bao = new ByteArrayOutputStream();
BinarySerializer bs = new BinarySerializer(bao,false);
bs.openTag(BinarySerializer.NAMESPACE_AIRSYNC,BinarySerializer.AIRSYNC_SYNC);
bs.openTag(BinarySerializer.NAMESPACE_AIRSYNC,BinarySerializer.AIRSYNC_COLLECTIONS);
bs.openTag(BinarySerializer.NAMESPACE_AIRSYNC,BinarySerializer.AIRSYNC_COLLECTION);
bs.textElement(BinarySerializer.NAMESPACE_AIRSYNC,BinarySerializer.AIRSYNC_SYNCKEY,vars.get(&quot;SYNCSYNCKEY&quot;));
bs.integerElement(BinarySerializer.NAMESPACE_AIRSYNC,BinarySerializer.AIRSYNC_COLLECTIONID,2);
bs.closeTag();
bs.closeTag();
bs.closeTag();

//Add WBXML Body to request
HttpEntity entity = new ByteArrayEntity(bao.toByteArray());
hp.setEntity(entity);

//Disable SSL validation/verification
SSLContextBuilder builder = new SSLContextBuilder();
builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());
SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(builder.build(),SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

//Create http connection and send request
CloseableHttpClient dhc = HttpClients.custom().setSSLSocketFactory(sslsf).build();
HttpResponse hr = dhc.execute(hp);

//Process reponse for reporting results in jmeter
ResponseCode = hr.getStatusLine().getStatusCode();
ResponseMessage = hr.getStatusLine().getReasonPhrase();

//View headers for debug
//for (Header h : hr.getAllHeaders()) {
//  log.info(&quot;Header: &quot;+h.getName()+&quot;=&quot;+h.getValue());
//}

//Convert WBXML to readable form for jmeter
String result=&quot;&quot;;
try {
  BinaryParser bp = new BinaryParser(new ByteArrayInputStream(EntityUtils.toByteArray(hr.getEntity())),false);
  while (bp.next() != null) {
    if (bp.getEventType() == BinaryParser.START_DOCUMENT) {
      result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
    } else if (bp.getEventType() == BinaryParser.END_DOCUMENT) {
      result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;;
    } else if (bp.getEventType() == BinaryParser.START_TAG) {
      result+=&quot;&lt;&quot;+bp.getName()+&quot;&gt;&quot;;
    } else if (bp.getEventType() == BinaryParser.END_TAG) {
      result+=&quot;&lt;/&quot;+bp.getName()+&quot;&gt;&quot;;
    } else if (bp.getEventType() == BinaryParser.TEXT) {
    	 // ugly quick fix to resolve invalid XML characters
    	 String text = bp.getText();
      text=text.replaceAll(&quot;\\p{Cntrl}&quot;,&quot;&quot;);
      result+=StringEscapeUtils.escapeXml(text);
    }
  }
} catch (IOException e) {
  if (e.message.equals(&quot;Unexpected EOF&quot;)) {
  	// ignore
  } else {
  	throw e;
  }
}
SampleResult.setResponseData(result);

} catch (Exception e) {
	log.error(&quot;Sync:&quot;+e.toString());
}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">${SYNCSYNCKEY}</stringProp>
                  <stringProp name="XPathExtractor.refname">SYNCSYNCKEY</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//SyncKey</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
