<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${__P(jmetercsv,${__P(REQUEST.log)})}</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Accounts" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${__P(ACCOUNTS.csv)}</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">USER,PASS</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
      </CSVDataSet>
      <hashTree/>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="IMAP User" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-160320324">
            <stringProp name="-522359878">${__P(LOAD.IMAPS.users)}</stringProp>
            <stringProp name="-126275138">0</stringProp>
            <stringProp name="1249126864">$(__P(LOAD.IMAPS.rampup)}</stringProp>
            <stringProp name="-838175455">${__P(LOAD.duration)}</stringProp>
            <stringProp name="1629732311">$(__P(LOAD.IMAPS.rampdown)}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="START" enabled="true">
          <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	import org.apache.commons.net.imap.IMAPSClient;
	import com.zimbra.jmeter.Zimbra;
	import com.zimbra.jmeter.Command;
	import javax.net.ssl.SSLSocketFactory;
	
	Zimbra imap = new Zimbra(props,&quot;IMAP&quot;);
	ArrayList commands = imap.getcommands();
	vars.putObject(&quot;COMMANDS&quot;,commands);

        // enable imap over ssl
	props.put(&quot;mail.imap.ssl.enable&quot;, &quot;true&quot;);
	props.setProperty(&quot;mail.store.protocol&quot;, &quot;imaps&quot;);

	// generate command DELAY
	if (props.get(&quot;LOAD.IMAPS.userduration&quot;) == null || commands.size() == 0) {
	  vars.putObject(&quot;DELAY&quot;,&quot;0&quot;);
	} else {
	  int delay = Integer.parseInt(props.get(&quot;LOAD.IMAPS.userduration&quot;))*1000/commands.size();
	  vars.putObject(&quot;DELAY&quot;,delay.toString());
	}

	// initialize CONTINUE
	if (commands.size() &gt; 0) {
	  vars.put(&quot;CONTINUE&quot;,&quot;true&quot;);
	} else {
	  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
	} 

	// create IMAP conncection and store for all future use
	IMAPClient ic = new IMAPClient();
	// establish a secure encrypted connection when interacting with the IMAP server
	ic.setSocketFactory(SSLSocketFactory.getDefault());
	try {
	  ic.connect(props.get(&quot;IMAPS.server&quot;),Integer.parseInt(props.get(&quot;IMAPS.port&quot;)));
	} catch (Exception x) {
	  log.info(&quot;connect error: &quot;,x);
	}
	vars.putObject(&quot;IMAPCLIENT&quot;,ic);

	// random folder names to be used by IMAP
	vars.put(&quot;imap_folder1&quot;,&quot;imapfolder1_${__Random(1,1000)}&quot;);
	vars.put(&quot;imap_folder2&quot;,&quot;imapfolder2_${__Random(1,1000)}&quot;);

	log.info(Thread.currentThread().getName()+&quot; START&quot;);
	// capture IMAP response and include as sampler Response
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Run_Commands" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(&quot;${CONTINUE}&quot;.equals(&quot;true&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Next_Command" enabled="true">
            <stringProp name="BeanShellSampler.query">
	import com.zimbra.jmeter.Command;

	ArrayList commands = vars.getObject(&quot;COMMANDS&quot;);
	if (commands.size() &gt; 0) {
	  Command c = commands.remove(0);
	  vars.put(&quot;COMMAND&quot;,c.getName());
	  for (Map.Entry a: c.argsSet()) {
		vars.put(a.getKey(),a.getValue());
	  }

	}
	if (commands.size() == 0) {
	  vars.put(&quot;CONTINUE&quot;,&quot;false&quot;);
	}</stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Command_Execution" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Command Delay" enabled="true">
              <stringProp name="ConstantTimer.delay">${DELAY}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Commands" enabled="true">
              <stringProp name="SwitchController.value">${COMMAND}</stringProp>
            </SwitchController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="default" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(Thread.currentThread().getName()+&quot; &quot;+vars.get(&quot;COMMAND&quot;)+&quot; not currently supported&quot;);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="APPEND_FOLDER" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; APPEND&quot;);
	  ic.append(&quot;${__evalVar(FOLDER)}&quot;,null,null,&quot;From: &quot;+vars.get(&quot;USER&quot;)+
				      &quot;\nTo: &quot;+vars.get(&quot;USER&quot;)+
				      &quot;\nSubject: Testing\n\nThis is a test of IMAPS append in ${__evalVar(FOLDER)} folder.\n&quot;);                           
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }

	  IsSuccess=false; 
	  log.info(Thread.currentThread().getName()+&quot; APPEND: &quot;+e);
	}

	if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;APPEND completed&quot;))) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false; 
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CHECK" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; CHECK&quot;);
	  ic.check();
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false; 
	  log.info(Thread.currentThread().getName()+&quot; CHECK: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK CHECK completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false; 
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CLOSE" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; CLOSE&quot;);
	  ic.close();
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false; 
	  log.info(Thread.currentThread().getName()+&quot; CLOSE: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK CLOSE completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false; 
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ENABLE" enabled="true">
                <stringProp name="BeanShellSampler.query">import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; ENABLE&quot;);
	  ic.sendCommand(&quot;ENABLE&quot;, &quot;CONDSTORE&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; ENABLE: &quot;+e);
	}

	if (!(ic.getReplyString().contains(&quot;OK ENABLE completed&quot;))) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="EXPUNGE" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; EXPUNGE&quot;);
	  ic.expunge();
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; EXPUNGE: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK EXPUNGE completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="FETCH" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	// use MSGID from search if done
	ArrayList msgid = vars.getObject(&quot;MSGID&quot;);
	String i = &quot;1&quot;;
	if (msgid != null &amp;&amp; msgid.size() &gt; 0) {
	  Random r = new Random();
	  Integer x = r.nextInt(msgid.size());
	  i = msgid.get(x);
	}

	try {
	   log.info(Thread.currentThread().getName()+&quot; FETCH&quot;);
	  ic.fetch(i,&quot;BODY[TEXT]&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false; 
	  log.info(Thread.currentThread().getName()+&quot; FETCH: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK FETCH completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="GETACL" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; GETACL&quot;);
	  ic.sendCommand(&quot;GETACL&quot;, &quot;INBOX&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; GETACL: &quot;+e);
	}

	if (!(ic.getReplyString().contains(&quot;OK GETACL completed&quot;))) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="GETACL_FOLDER" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; GETACL&quot;);
	  ic.sendCommand(&quot;GETACL&quot;, &quot;${__evalVar(FOLDER)}&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; GETACL: &quot;+e);
	}

	if (!(ic.getReplyString().contains(&quot;OK GETACL completed&quot;))) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="GETQUOTAROOT" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; GETQUOTAROOT&quot;);
	  ic.sendCommand(&quot;GETQUOTAROOT&quot;, &quot;INBOX&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; GETQUOTAROOT: &quot;+e);
	}

	if (!(ic.getReplyString().contains(&quot;OK GETQUOTAROOT completed&quot;))) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="GETQUOTAROOT_FOLDER" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; GETQUOTAROOT&quot;);
	  ic.sendCommand(&quot;GETQUOTAROOT&quot;, &quot;${__evalVar(FOLDER)}&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; GETQUOTAROOT: &quot;+e);
	}

	if (!(ic.getReplyString().contains(&quot;OK GETQUOTAROOT completed&quot;))) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ID" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; ID&quot;);
	  ic.sendCommand(&quot;ID&quot;,&quot;(\&quot;JMeter\&quot; \&quot;BeanShell\&quot; \&quot;Commons-Net\&quot; \&quot;Testing\&quot;)&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false; 
	  log.info(Thread.currentThread().getName()+&quot; ID: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK ID completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="IDLE" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	import java.util.concurrent.TimeUnit;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; IDLE&quot;);
	  ic.sendCommand(&quot;IDLE&quot;);
	  TimeUnit.SECONDS.sleep(10);
	  ic.sendData(&quot;DONE&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; IDLE: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK IDLE completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false; 
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LIST" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	import java.util.regex.Matcher;
	import java.util.regex.Pattern;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; LIST&quot;);
	  ic.list(&quot;\&quot;\&quot;&quot;,&quot;\&quot;*\&quot;&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; LIST: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK LIST completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LOGIN" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; LOGIN&quot;);
	  ic.login(vars.get(&quot;USER&quot;),vars.get(&quot;PASS&quot;));
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  continue_flag = &quot;false&quot;;
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; LOGIN: &quot;+e);
	}

	if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;LOGIN completed&quot;))) {
	  SampleResult.setSuccessful(false);
	  continue_flag = &quot;false&quot;;
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LOGOUT" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;
	String logout_error;

	try {
	  ic.logout();
	  log.info(Thread.currentThread().getName()+&quot; LOGOUT&quot;);
	} catch (Exception e) {
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  logout_error=&quot;true&quot;;
	  log.info (&quot;Error flag is: &quot; +logout_error);
	  }
	  
	  log.info(Thread.currentThread().getName()+&quot; LOGOUT: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK LOGOUT completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  continue_flag = &quot;false&quot;;
	}

	if (logout_error == &quot;true&quot;){
	  SampleResult.setSuccessful(true);
	  IsSuccess=true;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LSUB" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; LSUB&quot;);
	  ic.lsub(&quot;\&quot;\&quot;&quot;,&quot;\&quot;*\&quot;&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; LSUB: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK LSUB completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="MYRIGHTS" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; MYRIGHTS&quot;);
	  ic.sendCommand(&quot;MYRIGHTS&quot;, &quot;INBOX&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; MYRIGHTS: &quot;+e);
	}

	if (!(ic.getReplyString().contains(&quot;OK MYRIGHTS completed&quot;))) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NAMESPACE" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; NAMESPACE&quot;);
	  ic.sendCommand(&quot;NAMESPACE&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; NAMESPACE: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK NAMESPACE completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="NOOP" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; NOOP&quot;);
	  ic.noop();
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; NOOP: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK NOOP completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SEARCH_KEYWORD" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	import java.util.regex.Matcher;
	import java.util.regex.Pattern;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; SEARCH&quot;);
	  ic.search(&quot;TEXT ${__evalVar(KEYWORD)}&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; SEARCH: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK SEARCH completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
	  ic.select(&quot;INBOX&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  continue_flag = &quot;false&quot;;
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
	}

	if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;SELECT completed&quot;))) {
	  SampleResult.setSuccessful(false);
	  continue_flag = &quot;false&quot;;
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SELECT_FOLDER" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; SELECT&quot;);
	  ic.select(&quot;${__evalVar(FOLDER)}&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  continue_flag = &quot;false&quot;;
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; SELECT: &quot;+e);
	}

	if (!(ic.getReplyString().contains(&quot;OK&quot;) &amp;&amp; ic.getReplyString().contains(&quot;SELECT completed&quot;))) {
	  SampleResult.setSuccessful(false);
	  continue_flag = &quot;false&quot;;
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="STATUS" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; STATUS&quot;);
	  ic.status(&quot;INBOX&quot;,new String[]{&quot;MESSAGES&quot;,&quot;RECENT&quot;,&quot;UIDNEXT&quot;,&quot;UIDVALIDITY&quot;,&quot;UNSEEN&quot;});
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; STATUS: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK STATUS completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="STATUS_FOLDER" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; STATUS&quot;);
	  ic.status(&quot;${__evalVar(FOLDER)}&quot;,new String[]{&quot;MESSAGES&quot;,&quot;RECENT&quot;,&quot;UIDNEXT&quot;,&quot;UIDVALIDITY&quot;,&quot;UNSEEN&quot;});
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; STATUS: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK STATUS completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="SUBSCRIBE_FOLDER" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; SUBSCRIBE&quot;);
	  ic.subscribe(&quot;${__evalVar(FOLDER)}&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; SUBSCRIBE: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK SUBSCRIBE completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID FETCH" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	// use MSGUID from uid search if done
	ArrayList msguid = vars.getObject(&quot;MSGUID&quot;);
	String i = &quot;1&quot;;
	if (msguid != null &amp;&amp; msguid.size() &gt; 0) {
	  Random r = new Random();
	  Integer x = r.nextInt(msguid.size());
	  i = msguid.get(x);
	}

	try {
	  log.info(Thread.currentThread().getName()+&quot; UID FETCH&quot;);
	  ic.uid(&quot;FETCH&quot;,i+&quot; BODY[TEXT]&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; UID FETCH: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK UID FETCH completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UID STORE" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; UID STORE&quot;);
	  ic.uid(&quot;STORE&quot;,&quot;1 +FLAGS (\\Seen)&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; UID STORE: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK UID STORE completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UNSUBSCRIBE_FOLDER" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; UNSUBSCRIBE&quot;);
	  ic.unsubscribe(&quot;${__evalVar(FOLDER)}&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; UNSUBSCRIBE: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK UNSUBSCRIBE completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString());
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="XLIST" enabled="true">
                <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	import java.util.regex.Matcher;
	import java.util.regex.Pattern;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);
	String continue_flag = &quot;true&quot;;

	try {
	  log.info(Thread.currentThread().getName()+&quot; XLIST&quot;);
	  ic.sendCommand(&quot;XLIST&quot;, &quot;\&quot;\&quot; \&quot;*\&quot;&quot;);
	} catch (Exception e) {
	  SampleResult.setSuccessful(false);
	  if (e.getMessage().contains(&quot;Connection closed without indication&quot;)){
	  continue_flag = &quot;false&quot;;
	  }
	  
	  IsSuccess=false;
	  log.info(Thread.currentThread().getName()+&quot; XLIST: &quot;+e);
	}

	if (!ic.getReplyString().contains(&quot;OK XLIST completed&quot;)) {
	  SampleResult.setSuccessful(false);
	  IsSuccess=false;
	  log.info(&quot;Command response is: &quot; + ic.getReplyString()); 
	}

	vars.put(&quot;CONTINUE&quot;,continue_flag);
	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="END" enabled="true">
          <stringProp name="BeanShellSampler.query">
	import org.apache.commons.net.imap.IMAPClient;
	IMAPClient ic = vars.getObject(&quot;IMAPCLIENT&quot;);

	try {
	  ic.disconnect();
	  log.info(Thread.currentThread().getName()+&quot; END&quot;);
	} catch (Exception e) {
	  log.info(Thread.currentThread().getName()+&quot; END: &quot;+e);
	}

	SampleResult.setResponseData(ic.getReplyString());
	SampleResult.setDataType(org.apache.jmeter.samplers.SampleResult.TEXT);</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${__P(jmetercsv,${__P(REQUEST.log)})}</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
